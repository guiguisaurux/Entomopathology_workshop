Local Here((table2 = New Table("Résumé de Expérience_3_Masse_Transformée groupé par Bloc, Trt, Wound, Strain", Add Rows(270), New Script("Source", Data Table("Expérience_3_Masse_Transformée") << Summary(Group(:Bloc, :Trt, :Wound, :Strain), Mean(:Mass), Subgroup(:Day), Freq("Aucun(e)"), Weight("Aucun(e)"), output table name("Résumé de Expérience_3_Masse_Transformée groupé par Bloc, Trt, Wound, Strain"))), New Column("Bloc", Character, "Nominal", Set Values({"B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10"}), Lock(1)), New Column("Trt", Character, "Nominal", Set Values({"Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev"}), Lock(1)), New Column("Wound", Character, "Nominal", Set Values({"Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste"}), Lock(1)), New Column("Strain", Character, "Nominal", Set Values({"Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita", "Can", "Gre", "Ita"}), Lock(1)), New Column(["en" => "N Rows", "fr" => "Nb. de lignes"], Numeric, "Continuous", Format("Fixed Dec", 12, 0), Set Values([8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
	, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
	, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
	, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8
	, 8]), Lock(1)), New Column(["en" => "Mean(Mass, 2)", "fr" => "Moyenne(Mass, 2)"], Numeric, "Continuous", Format("Best", 12), Set Values([5817, 7991, 5851, 5369, 6065, 5581, 5995, 7352, 6865, 6261, 6415, 5942, 4975, 6007, 6401, 6139, 6306, 6437, 6239, 7558, 7224, 6423, 7124, 6995, 6232, 7622, 6794, 5846, 7967, 5431, 4953, 7118, 5914, 4983
	, 7205, 7604, 5826, 5664, 6507, 5395, 6010, 6165, 5105, 6103, 6503, 7067, 7416, 7922, 6091, 7500, 7589, 4970, 7117, 8205, 5645, 7660, 6421, 5583, 7072, 4240, 5497, 7076, 6140, 5139, 6720, 8313, 5576, 5661
	, 5958, 5007, 6151, 6645, 6521, 7825, 7449, 5946, 6246, 6811, 5541, 6224, 7288, 4684, 6588, 6774, 5175, 5788, 5849, 6160, 6737, 4400, 5345, 6449, 7616, 4718, 5871, 6065, 5815, 4971, 5446, 5558, 7248, 7385
	, 4785, 6354, 6700, 6179, 7203, 7533, 4297, 6571, 5499, 4739, 5598, 6377, 5487, 6331, 5148, 4971, 6900, 6083, 3646, 6239, 7039, 4496, 5786, 6667, 5869, 6037, 7513, 6961, 6777, 7676, 6518, 7022, 8167, 5652
	, 5846, 5997, 5395, 5724, 3264, 4366, 7833, 5038, 4319, 7281, 5570, 4318, 5522, 6500, 5435, 5274, 6941, 6270, 6775, 7124, 5165, 6113, 6828, 6405, 6680, 8291, 6575, 7217, 7321, 5138, 6040, 6484, 4969, 6977
	, 5605, 6000, 6033, 5579, 4678, 5699, 6039, 5278, 5864, 7072, 6274, 8706, 7426, 4587, 6625, 7225, 5415, 5621, 6160, 5184, 6087, 5509, 5683, 7348, 5362, 5633, 7229, 5896, 6042, 6696, 6656, 4904, 6237, 5992
	, 5307, 5509, 7363, 5701, 6199, 6800, 5081, 5822, 6062, 5989, 6769, 6731, 5477, 6028, 5715, 5192, 5620, 4641, 5761, 6394, 4941, 4756, 5941, 6985, 4048, 5526, 6140, 5284, 6436, 5660, 5475, 7513, 6313, 3998
	, 7718, 7602, 5268, 6431, 6122, 5315, 5440, 6099, 4395, 6105, 4057, 5245, 5154, 3654, 4872, 5877, 5799, 4568, 4340, 5022, 4329, 5664, 6447, 5319, 7041, 6431, 4258, 5999, 6835, 5524, 6059, 5599]), Lock(1)), New Column(["en" => "Mean(Mass, 4)", "fr" => "Moyenne(Mass, 4)"], Numeric, "Continuous", Format("Best", 12), Set Values([7564, 8899, 7559, 5836, 6723, 5997, 7266, 8365, 7887, 7616, 7694, 6241, 5504, 6465, 6968, 7363, 7534, 7666, 7469, 8499, 8131, 7023, 7823, 6753, 7112, 8646, 7616, 6868, 9196, 6305, 5017, 8236, 6664, 5385
	, 7742, 8518, 6896, 7205, 7628, 5436, 6338, 7099, 5774, 6822, 7833, 8070, 8752, 9039, 6542, 7847, 8549, 5853, 8287, 8860, 6137, 9685, 7415, 5874, 7244, 4789, 6218, 8038, 7435, 5855, 7125, 9506, 6020, 6199
	, 6685, 5579, 6603, 7626, 7334, 8796, 7975, 6048, 6736, 7566, 6275, 7039, 8323, 6029, 7805, 8118, 5167, 6260, 5635, 7318, 7792, 5428, 6706, 7299, 8119, 4435, 6427, 6181, 6933, 5482, 6292, 6533, 8623, 8894
	, 4861, 6471, 7157, 7180, 7785, 8438, 4652, 7168, 6881, 5269, 6179, 7091, 6168, 7197, 6136, 6912, 7699, 7346, 2742, 6715, 8048, 5287, 6084, 6793, 6346, 7108, 8481, 7468, 6980, 8550, 7830, 8078, 9153, 6886
	, 6997, 7251, 6161, 6606, 3411, 4724, 9615, 4713, 5913, 8950, 6348, 4465, 5649, 6767, 6182, 6093, 8255, 7521, 8199, 8113, 5517, 7224, 8100, 6535, 8118, 9414, 7910, 8434, 8038, 5390, 6141, 6470, 5795, 7963
	, 6582, 7116, 7421, 5872, 5237, 6414, 6887, 5661, 6848, 8000, 6638, 9324, 7958, 5201, 6932, 7563, 5845, 6184, 7122, 6415, 6558, 6290, 6359, 7525, 5905, 6122, 8183, 6713, 7274, 7222, 8788, 5571, 7129, 7305
	, 5781, 6718, 8155, 6714, 6636, 7679, 5204, 6052, 6053, 7851, 7060, 7368, 6967, 6985, 6739, 5569, 6244, 4756, 6998, 7523, 5299, 6176, 6612, 7803, 4566, 5760, 6624, 6225, 8313, 6885, 5820, 8350, 6868, 4361
	, 8352, 8497, 5959, 7665, 7319, 5904, 6211, 7097, 5088, 6704, 4094, 6113, 6343, 4326, 5787, 7481, 6685, 5072, 5050, 4629, 5142, 5847, 7546, 6071, 8347, 7521, 4648, 6604, 7253, 6733, 6855, 6163]), Lock(1)), New Column(["en" => "Mean(Mass, 7)", "fr" => "Moyenne(Mass, 7)"], Numeric, "Continuous", Format("Best", 12), Set Values([8219, 10644, 8667, 6474, 7327, 5865, 7259, 9525, 7789, 8170, 8223, 7325, 5322, 6474, 5764, 8480, 8174, 9277, 8263, 9617, 8303, 7289, 8662, 7295, 7469, 10109, 7765, 7078, 9417, 7482, 4388, 8186, 7138, 5732
	, 8354, 8557, 7533, 7690, 8897, 5751, 6359, 7372, 7398, 7186, 9144, 8873, 10284, 9249, 7226, 8342, 9106, 6565, 8349, 9138, 6831, 10109, 7841, 6740, 7858, 4705, 6804, 8665, 8763, 6703, 7837, 10201, 6009
	, 6156, 7263, 6029, 6967, 8423, 8081, 9472, 9166, 6230, 6989, 8067, 6656, 8025, 9017, 7161, 8269, 9358, 5964, 6828, 6252, 6812, 8748, 6428, 7119, 7907, 10237, 5330, 6949, 6969, 7976, 6408, 7421, 8182, 9434
	, 9146, 5686, 6806, 7671, 7672, 7713, 9025, 6453, 8420, 8035, 5956, 5705, 7105, 6607, 8026, 6541, 7935, 8026, 8106, 3433, 7254, 8072, 6601, 6272, 8751, 7527, 8450, 9225, 7819, 7383, 8910, 7531, 9266, 10196
	, 7975, 7556, 8409, 6263, 6273, 3929, 6369, 10583, 3521, 6265, 9077, 8407, 4788, 6012, 5244, 6025, 7008, 8569, 7878, 9490, 8513, 5872, 7155, 7915, 6924, 9827, 9349, 8318, 9229, 7870, 5896, 7503, 6985, 6108
	, 8447, 6849, 8234, 8099, 8259, 5706, 7044, 6668, 5615, 7254, 8946, 7361, 10204, 8174, 5038, 7029, 6989, 6789, 7121, 7849, 7298, 7007, 7781, 6372, 7381, 6099, 6865, 8642, 7696, 7884, 8235, 9676, 5157, 7125
	, 7641, 6056, 7086, 9142, 7087, 8844, 8276, 5849, 6619, 6093, 7904, 8526, 7492, 7365, 7817, 7910, 5613, 7031, 5534, 7198, 7967, 5405, 6470, 7453, 8937, 5667, 7346, 7175, 6098, 8798, 6624, 7522, 9530, 6946
	, 5365, 8202, 8402, 6889, 8146, 8297, 6887, 6082, 7971, 4542, 6962, 4511, 6190, 8218, 5840, 7055, 7804, 7915, 5639, 5661, 6135, 5672, 6589, 8305, 6857, 9653, 8367, 5110, 7103, 7239, 7277, 7998, 6644]), Lock(1)), New Column(["en" => "Mean(Mass, 9)", "fr" => "Moyenne(Mass, 9)"], Numeric, "Continuous", Format("Best", 12), Set Values([8985, 11465, 9166, 7461, 8060, 7571, 7932, 10397, 8451, 9236, 9609, 8360, 6331, 5939, 6380, 8862, 9028, 9648, 8848, 10655, 10460, 7692, 9115, 8151, 8689, 10176, 7785, 7938, 10203, 9007, 5425, 9081, 8476
	, 6840, 9454, 9599, 8455, 8717, 9720, 7653, 7168, 8446, 7508, 8699, 9080, 9901, 11410, 10702, 7897, 8062, 8735, 7372, 9366, 9651, 9150, 11093, 9352, 7430, 9333, 4799, 7368, 9537, 9801, 8021, 9363, 11953
	, 7576, 6824, 7857, 6613, 8139, 9952, 8969, 10260, 10456, 6902, 7739, 8623, 8543, 8522, 10179, 7538, 10365, 9742, 6021, 6322, 7000, 8106, 9116, 6256, 7239, 9181, 10521, 5096, 8345, 6659, 8226, 7356, 9007
	, 8774, 10846, 9195, 6050, 7729, 8436, 8885, 8624, 9940, 7589, 9955, 8968, 6510, 7044, 7801, 7915, 8715, 7826, 8114, 11370, 9154, 3971, 8584, 10175, 7187, 8646, 9833, 8055, 9924, 11150, 9157, 7625, 10263
	, 9759, 10630, 10810, 8344, 8805, 9315, 6342, 7632, 3558, 6494, 11194, 4646, 6590, 10640, 8960, 5241, 6129, 5847, 6335, 7432, 8851, 9048, 9794, 10155, 6774, 8400, 9211, 8259, 10672, 10139, 8561, 10137, 8870
	, 7171, 8155, 7860, 6960, 9731, 7715, 8307, 8906, 9566, 5726, 7835, 7984, 7845, 7840, 9995, 8799, 11970, 9185, 5038, 8178, 8254, 7913, 7803, 8587, 8338, 8444, 8504, 6956, 8527, 7040, 8069, 10026, 8675, 8363
	, 9326, 10875, 6257, 8950, 8828, 6449, 7953, 10089, 7913, 9671, 10024, 6334, 7574, 6724, 8637, 8921, 8155, 9221, 9590, 9123, 5986, 8211, 6614, 8801, 10068, 6061, 7815, 9037, 10688, 6442, 8410, 8838, 7781
	, 11094, 7856, 8628, 10869, 9899, 6909, 9655, 10153, 7349, 8469, 8855, 7908, 7841, 8699, 4817, 9358, 4915, 7286, 8675, 5866, 7971, 8790, 9948, 6232, 6783, 6922, 6783, 7845, 9299, 6972, 10937, 9150, 5630
	, 7705, 7559, 7954, 8522, 8362]), Lock(1)), New Column(["en" => "Mean(Mass, 11)", "fr" => "Moyenne(Mass, 11)"], Numeric, "Continuous", Format("Best", 12), Set Values([9586, 12339, 9851, 7890, 8899, 8414, 9041, 11449, 9158, 9956, 10672, 9562, 6675, 5979, 6686, 9261, 9859, 10235, 10113, 12192, 11713, 8322, 9752, 8370, 9084, 11198, 8514, 9705, 12168, 9621, 5969, 10326, 9474
	, 8402, 9730, 10705, 9904, 10911, 11854, 8324, 8177, 9584, 9668, 10317, 11344, 11238, 13432, 12042, 8670, 8889, 9815, 8442, 10786, 11984, 9585, 12368, 10793, 7801, 10162, 5646, 8719, 10628, 11366, 8854
	, 10123, 12713, 8165, 7991, 8311, 8040, 9078, 10109, 9985, 10980, 11065, 7706, 8360, 9630, 9083, 9441, 11315, 8406, 11164, 9997, 6579, 6106, 7084, 8719, 10382, 6937, 8258, 10122, 11274, 5116, 8997, 6779
	, 8975, 7754, 9667, 9492, 12024, 9821, 6233, 8179, 8584, 9599, 9602, 10547, 8174, 10236, 10412, 7219, 7516, 9083, 8834, 10718, 8905, 9731, 12451, 10812, 3813, 9032, 10324, 8372, 9953, 10941, 9534, 11282
	, 12908, 9208, 8653, 11207, 11053, 12347, 12850, 9358, 9425, 9926, 6987, 8812, 3784, 6789, 12273, 4977, 7211, 11659, 9578, 5772, 5825, 6555, 7053, 7818, 9425, 10194, 10843, 11296, 7492, 9089, 10544, 9270
	, 11458, 11637, 9225, 10685, 10545, 7122, 8945, 8201, 7873, 10530, 8740, 8804, 9857, 9396, 6276, 7981, 8823, 8529, 8958, 10699, 9779, 12609, 10415, 5499, 8665, 8983, 8315, 8436, 9365, 9185, 9384, 9541, 7936
	, 8730, 7976, 8910, 11310, 9541, 9465, 10275, 11582, 6706, 9772, 9734, 6704, 9236, 9502, 9014, 10825, 10963, 6806, 8018, 7486, 9429, 9390, 9202, 10262, 10256, 9999, 6364, 8574, 6997, 9937, 10675, 6934, 8657
	, 9371, 11425, 6318, 9161, 9080, 8124, 11647, 8694, 8793, 11550, 10285, 7077, 10339, 10895, 8005, 9305, 9788, 9003, 9148, 10186, 5627, 9977, 5958, 8826, 10542, 6859, 8866, 10607, 10974, 7328, 7834, 7626
	, 7956, 8473, 11111, 8651, 12740, 10000, 6242, 8562, 8973, 10152, 10557, 9614]), Lock(1)), New Column(["en" => "Mean(Mass, 14)", "fr" => "Moyenne(Mass, 14)"], Numeric, "Continuous", Format("Best", 12), Set Values([10706, 14223, 12920, 8847, 10559, 9449, 11465, 12865, 11049, 11201, 12920, 12374, 7091, 7979, 7934, 12063, 12875, 12543, 12586, 14736, 11124, 9776, 10546, 7141, 11026, 13696, 9420, 11205, 13747, 11553, 6294
	, 11690, 10106, 9321, 9581, 11424, 11171, 12510, 11971, 9117, 8156, 10146, 10456, 12112, 12569, 12450, 13697, 12254, 9355, 10087, 10942, 10024, 12148, 13122, 10483, 13518, 11635, 9918, 11114, 6340, 10905
	, 12777, 13654, 10695, 12071, 14691, 8339, 8855, 9579, 9763, 10380, 11211, 11420, 11577, 10946, 9504, 8010, 11362, 10257, 12318, 13462, 10898, 12204, 11885, 6676, 7043, 7526, 9628, 12344, 9072, 11172, 12269
	, 13861, 6893, 9173, 8656, 11368, 8955, 12015, 12116, 13889, 10759, 6994, 7965, 10845, 11462, 11432, 12419, 9919, 12081, 12328, 8609, 7125, 8851, 9672, 11136, 10096, 12285, 12715, 12966, 4047, 9779, 10715
	, 9790, 10753, 13416, 11558, 12439, 14225, 9206, 9099, 12002, 11716, 13190, 14649, 12361, 10575, 13031, 9020, 10063, 4848, 9590, 15378, 5786, 10737, 14589, 13527, 7107, 7058, 7974, 9171, 10449, 11096, 12474
	, 14783, 13605, 8789, 10672, 11359, 11022, 14782, 13650, 12412, 12549, 12497, 8089, 10583, 7929, 9029, 12808, 10744, 12299, 13298, 11512, 8410, 10438, 10235, 9399, 12105, 13257, 11819, 13904, 12729, 6494
	, 9589, 8162, 10483, 10237, 12092, 11537, 10634, 12576, 8462, 9554, 9117, 9933, 12902, 9828, 12348, 12273, 14261, 7390, 11156, 8654, 7653, 10999, 11308, 11982, 12780, 12694, 7987, 8827, 9647, 12030, 10498
	, 10621, 11731, 12197, 12094, 7619, 10180, 8967, 11375, 12648, 9227, 10620, 11968, 12943, 7582, 10836, 9988, 9254, 13197, 10036, 11919, 14090, 11456, 7769, 11415, 12503, 10828, 11087, 12042, 10425, 9926
	, 11413, 5841, 10253, 6492, 9196, 12382, 9260, 10761, 12369, 12247, 8347, 9031, 9018, 9132, 8577, 12521, 10324, 13949, 12342, 6410, 9565, 9882, 11817, 11942, 10451]), Lock(1)), New Column(["en" => "Mean(Mass, 16)", "fr" => "Moyenne(Mass, 16)"], Numeric, "Continuous", Format("Best", 12), Set Values([10639, 12823, 13178, 7680, 10666, 9867, 11699, 11622, 10251, 11883, 13303, 12218, 6969, 7962, 7948, 12376, 13420, 11257, 12318, 14707, 11325, 10120, 7798, 6101, 11250, 12597, 9445, 11094, 13756, 12332, 6324
	, 12010, 9800, 9792, 9785, 11765, 10109, 12801, 12090, 9578, 8001, 10025, 11235, 12760, 13431, 12569, 11558, 12407, 8439, 10681, 9199, 10210, 12164, 12945, 11808, 11664, 12983, 10609, 12069, 6017, 11027
	, 12842, 13955, 11569, 13384, 13428, 8719, 8679, 10519, 9974, 10706, 11924, 11394, 10639, 11768, 9665, 8592, 10363, 10563, 12504, 13559, 11601, 11816, 12219, 8027, 7386, 7573, 9872, 12821, 9560, 10901, 12832
	, 12604, 6921, 10532, 6941, 11654, 9790, 12491, 12128, 13901, 11189, 7336, 7568, 10641, 11724, 11433, 11138, 11109, 13169, 12530, 8716, 7785, 8551, 9880, 11843, 10817, 13087, 13246, 12946, 3441, 10003, 11923
	, 10493, 11427, 13641, 11675, 13134, 13577, 6995, 9122, 12224, 11681, 12226, 13243, 12385, 10790, 13026, 9286, 10649, 4940, 9777, 14792, 6296, 10345, 14517, 13890, 7523, 6904, 7751, 8708, 11289, 10454, 12713
	, 14629, 13551, 8687, 10409, 11022, 11480, 15381, 13340, 12563, 12915, 12161, 8867, 11615, 8231, 9789, 12739, 10721, 12702, 13280, 12474, 8365, 10055, 10225, 9318, 12433, 13706, 11862, 13643, 12648, 6186
	, 9108, 8010, 10946, 10619, 12427, 11469, 11574, 13022, 8725, 9339, 8946, 10521, 12996, 10695, 12877, 12520, 14399, 7295, 10905, 8753, 7659, 11156, 10468, 11549, 10368, 12587, 8705, 9989, 9259, 11755, 8919
	, 10742, 11920, 13341, 11149, 6443, 11035, 10044, 11883, 13340, 9646, 10621, 12497, 13161, 8710, 11351, 9785, 9967, 13154, 9941, 12415, 14806, 11524, 9189, 11095, 11940, 11147, 10932, 12556, 10795, 10321
	, 11798, 5889, 11204, 6151, 9096, 12334, 9709, 10904, 12335, 12982, 8721, 9525, 9648, 9337, 9015, 12734, 10574, 14289, 12577, 6902, 9600, 9654, 11844, 12174, 10622]), Lock(1)), New Column(["en" => "Mean(Mass, 18)", "fr" => "Moyenne(Mass, 18)"], Numeric, "Continuous", Format("Best", 12), Set Values([10894, 11469, 13015, 7581, 10558, 10074, 11587, 11777, 10231, 11368, 13553, 10707, 6780, 7942, 7948, 11835, 13405, 11029, 10781, 13036, 10204, 10238, 7858, 4920, 11268, 12474, 8071, 11190, 13683, 12756
	, 6373, 11994, 9427, 10223, 9521, 10665, 10254, 12985, 12058, 9812, 7974, 8599, 11109, 12792, 13092, 12357, 10594, 12292, 8317, 10219, 8929, 9964, 11870, 12543, 11834, 11727, 12439, 9161, 12216, 6170, 10782
	, 12554, 13870, 11595, 13587, 8903, 8733, 8586, 10439, 9839, 10919, 10199, 11155, 10429, 10389, 9398, 8437, 10080, 10312, 12267, 13276, 11444, 11907, 11947, 6378, 7023, 6404, 10217, 12439, 9452, 10731, 12890
	, 12045, 6867, 10571, 6591, 11125, 9952, 12846, 11867, 13745, 11221, 5803, 7525, 10298, 11681, 11156, 10800, 11374, 12977, 12406, 8877, 8069, 8737, 10178, 10692, 10880, 13049, 13458, 13042, 3408, 10203
	, 12359, 10475, 11780, 13576, 11447, 11585, 13510, 6851, 7290, 12085, 11515, 10481, 12931, 12250, 10996, 13010, 8987, 10703, 5103, 9649, 14187, 6446, 10123, 14104, 13695, 7923, 6802, 7452, 8622, 11110, 10375
	, 12761, 14395, 13197, 8776, 10419, 10884, 11264, 15310, 12030, 12520, 12849, 11850, 9180, 11592, 8416, 9674, 12848, 10878, 12453, 13218, 11475, 7883, 10064, 10262, 9755, 11956, 12246, 11820, 7939, 11217
	, 5798, 6750, 6805, 10813, 10657, 12362, 11695, 12001, 12892, 8589, 7728, 9228, 11251, 13158, 9845, 12532, 12546, 14113, 7465, 11199, 8757, 7563, 10709, 8963, 11356, 10035, 11400, 8571, 10043, 9065, 11525
	, 8860, 9343, 12250, 12284, 11361, 6445, 11187, 10099, 12424, 11811, 9621, 10389, 12508, 11790, 8868, 11299, 8730, 8740, 12726, 8666, 12234, 14289, 8719, 9645, 11089, 10962, 10589, 9249, 12226, 10824, 10752
	, 11665, 5865, 11600, 6322, 9216, 12412, 9691, 10909, 12442, 13437, 8777, 9487, 9836, 8920, 9294, 12696, 10597, 12895, 12449, 7030, 9565, 9536, 11829, 10520, 9771]), Lock(1)))) << Run Formulas; table2 << Fit Group(SendToByGroup({:Strain == "Can"}), Fit Model(Y(:"Mean(Mass, 2)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 2)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05, Crosstab Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 4)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 4)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05, Crosstab Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), SendToByGroup({:Strain == "Can"}, Fit Model(Y(:"Mean(Mass, 7)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 7)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05, Crosstab Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)})))), SendToByGroup({:Strain == "Gre"}, Fit Model(Y(:"Mean(Mass, 7)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 7)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0)}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)})))), SendToByGroup({:Strain == "Ita"}, Fit Model(Y(:"Mean(Mass, 7)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 7)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt * :Wound << {LSMeans Tukey HSD(0.05, Crosstab Report(0), Connecting Letters Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)})))), Fit Model(Y(:"Mean(Mass, 9)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 9)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05, Crosstab Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), SendToByGroup({:Strain == "Can"}, Fit Model(Y(:"Mean(Mass, 11)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 11)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0)}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 14)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 14)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05, Crosstab Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 16)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 16)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05, Crosstab Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 18)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 18)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05, Crosstab Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Where(:Strain == "Can")), SendToByGroup({:Strain == "Gre"}, Fit Model(Y(:"Mean(Mass, 11)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 11)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05, Crosstab Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 14)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 14)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05, Crosstab Report(0), Connecting Letters Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 16)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 16)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0)}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 18)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 18)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0)}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Where(:Strain == "Gre")), SendToByGroup({:Strain == "Ita"}, Fit Model(Y(:"Mean(Mass, 11)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 11)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05)}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 14)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 14)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Wound << {LSMeans Tukey HSD(0.05, Crosstab Report(0))}, :Trt * :Wound << {LSMeans Tukey HSD(0.05, Crosstab Report(0), Connecting Letters Report(0))}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 16)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 16)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0), {:Trt << {LSMeans Tukey HSD(0.05)}}}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Fit Model(Y(:"Mean(Mass, 18)"n), Effects(:Trt, :Wound, :Trt * :Wound), Random Effects(:Bloc, :Bloc * :Trt, :Bloc * :Wound), NoBounds(1), Personality("Standard Least Squares"), Method("REML"), Emphasis("Effect Leverage"), Run(:"Moyenne(Mass, 18)"n << {Summary of Fit(1), Analysis of Variance(0), Parameter Estimates(1), Scaled Estimates(0), Plot Actual by Predicted(1), Plot Regression(0), Plot Residual by Predicted(1), Plot Studentized Residuals(0), Plot Effect Leverage(1), Plot Residual by Normal Quantiles(0)}), SendToReport(Dispatch({"Whole Model"}, "Effect Summary", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Actual by Predicted Plot", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "Summary of Fit", OutlineBox, {Close(1)}), Dispatch({"Whole Model"}, "REML Variance Component Estimates", OutlineBox, {Close(1)}), Dispatch({"Trt"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Wound"}, "Leverage Plot", OutlineBox, {Close(1)}), Dispatch({"Trt*Wound"}, "Leverage Plot", OutlineBox, {Close(1)}))), Where(:Strain == "Ita")), By(:Strain)); (table1 = New Table("Expérience_3_Masse_Transformée", Add Rows(2160), New Script("Source", Open("$DOCUMENTS/Entomopathologie_workshop/Data/Experiment_3_csv/Expérience_3_Masse_Transformée.csv", columns(New Column("Identity", Character, "Nominal"), New Column("Bloc", Character, "Nominal"), New Column("Trt", Character, "Nominal"), New Column("Wound", Character, "Nominal"), New Column("Strain", Character, "Nominal"), New Column("Day", Numeric, "Continuous", Format("Best", 12)), New Column("Initial_Mass", Numeric, "Continuous", Format("Best", 12)), New Column("Mass", Numeric, "Continuous", Format("Best", 12)), New Column("Initial_Number", Numeric, "Continuous", Format("Best", 12)), New Column("Number", Numeric, "Continuous", Format("Best", 12)), New Column("Mean", Numeric, "Continuous", Format("Best", 12)), New Column("Survival", Numeric, "Continuous", Format("Best", 12)), New Column("True_Mass", Numeric, "Continuous", Format("Best", 12))), Import Settings(End Of Line(CRLF, CR, LF), End Of Field(Comma, CSV(1)), Treat Leading Zeros as Character(1), Strip Quotes(0), Use Apostrophe as Quotation Mark(0), Use Regional Settings(0), Scan Whole File(1), Treat empty columns as numeric(0), CompressNumericColumns(0), CompressCharacterColumns(0), CompressAllowListCheck(0), Labels(1), Column Names Start(1), First Named Column(1), Data Starts(2), Lines To Read("All"), Year Rule("20xx")))), New Column("Identity", Character, "Nominal", Set Values({"1-Can4ConSer-B4", "1-Can4ConSer-B4", "1-Can4ConSer-B4", "1-Can4ConSer-B4", "1-Can4ConSer-B4", "1-Can4ConSer-B4", "1-Can4ConSer-B4", "1-Can4ConSer-B4", "1-Can5LevSer-B5", "1-Can5LevSer-B5", "1-Can5LevSer-B5", "1-Can5LevSer-B5", "1-Can5LevSer-B5", "1-Can5LevSer-B5", "1-Can5LevSer-B5", "1-Can5LevSer-B5", "1-Gre2ConNon-B2", "1-Gre2ConNon-B2", "1-Gre2ConNon-B2", "1-Gre2ConNon-B2", "1-Gre2ConNon-B2", "1-Gre2ConNon-B2", "1-Gre2ConNon-B2", "1-Gre2ConNon-B2", "1-Gre3LevSte-B3", "1-Gre3LevSte-B3", "1-Gre3LevSte-B3", "1-Gre3LevSte-B3", "1-Gre3LevSte-B3", "1-Gre3LevSte-B3", "1-Gre3LevSte-B3", "1-Gre3LevSte-B3", "1-Gre9ConSer-B9", "1-Gre9ConSer-B9", "1-Gre9ConSer-B9", "1-Gre9ConSer-B9", "1-Gre9ConSer-B9", "1-Gre9ConSer-B9", "1-Gre9ConSer-B9", "1-Gre9ConSer-B9", "1-Ita10LevNon-B10", "1-Ita10LevNon-B10", "1-Ita10LevNon-B10", "1-Ita10LevNon-B10", "1-Ita10LevNon-B10", "1-Ita10LevNon-B10", "1-Ita10LevNon-B10", "1-Ita10LevNon-B10", "1-Ita1LevSer-B1", "1-Ita1LevSer-B1", "1-Ita1LevSer-B1", "1-Ita1LevSer-B1", "1-Ita1LevSer-B1", "1-Ita1LevSer-B1", "1-Ita1LevSer-B1", "1-Ita1LevSer-B1", "1-Ita6ConNon-B6", "1-Ita6ConNon-B6", "1-Ita6ConNon-B6", "1-Ita6ConNon-B6", "1-Ita6ConNon-B6", "1-Ita6ConNon-B6", "1-Ita6ConNon-B6", "1-Ita6ConNon-B6", "1-Ita7BacNon-B7", "1-Ita7BacNon-B7", "1-Ita7BacNon-B7", "1-Ita7BacNon-B7", "1-Ita7BacNon-B7", "1-Ita7BacNon-B7", "1-Ita7BacNon-B7", "1-Ita7BacNon-B7", "1-Ita8BacSte-B8", "1-Ita8BacSte-B8", "1-Ita8BacSte-B8", "1-Ita8BacSte-B8", "1-Ita8BacSte-B8", "1-Ita8BacSte-B8", "1-Ita8BacSte-B8", "1-Ita8BacSte-B8", "10-Can10ConNon-B10", "10-Can10ConNon-B10", "10-Can10ConNon-B10", "10-Can10ConNon-B10", "10-Can10ConNon-B10", "10-Can10ConNon-B10", "10-Can10ConNon-B10", "10-Can10ConNon-B10", "10-Can4LevSte-B4", "10-Can4LevSte-B4", "10-Can4LevSte-B4", "10-Can4LevSte-B4", "10-Can4LevSte-B4", "10-Can4LevSte-B4", "10-Can4LevSte-B4", "10-Can4LevSte-B4", "10-Can6BacSte-B6", "10-Can6BacSte-B6", "10-Can6BacSte-B6", "10-Can6BacSte-B6", "10-Can6BacSte-B6", "10-Can6BacSte-B6", "10-Can6BacSte-B6", "10-Can6BacSte-B6", "10-Gre1ConNon-B1", "10-Gre1ConNon-B1", "10-Gre1ConNon-B1", "10-Gre1ConNon-B1", "10-Gre1ConNon-B1", "10-Gre1ConNon-B1", "10-Gre1ConNon-B1", "10-Gre1ConNon-B1", "10-Gre2LevSer-B2", "10-Gre2LevSer-B2", "10-Gre2LevSer-B2", "10-Gre2LevSer-B2", "10-Gre2LevSer-B2", "10-Gre2LevSer-B2", "10-Gre2LevSer-B2", "10-Gre2LevSer-B2", "10-Gre3BacSer-B3", "10-Gre3BacSer-B3", "10-Gre3BacSer-B3", "10-Gre3BacSer-B3", "10-Gre3BacSer-B3", "10-Gre3BacSer-B3", "10-Gre3BacSer-B3", "10-Gre3BacSer-B3", "10-Gre5ConSte-B5", "10-Gre5ConSte-B5", "10-Gre5ConSte-B5", "10-Gre5ConSte-B5", "10-Gre5ConSte-B5", "10-Gre5ConSte-B5", "10-Gre5ConSte-B5", "10-Gre5ConSte-B5", "10-Gre8BacSer-B8", "10-Gre8BacSer-B8", "10-Gre8BacSer-B8", "10-Gre8BacSer-B8", "10-Gre8BacSer-B8", "10-Gre8BacSer-B8", "10-Gre8BacSer-B8", "10-Gre8BacSer-B8", "10-Ita7LevSte-B7", "10-Ita7LevSte-B7", "10-Ita7LevSte-B7", "10-Ita7LevSte-B7", "10-Ita7LevSte-B7", "10-Ita7LevSte-B7", "10-Ita7LevSte-B7", "10-Ita7LevSte-B7", "10-Ita9BacNon-B9", "10-Ita9BacNon-B9", "10-Ita9BacNon-B9", "10-Ita9BacNon-B9", "10-Ita9BacNon-B9", "10-Ita9BacNon-B9", "10-Ita9BacNon-B9", "10-Ita9BacNon-B9", "11-Can2LevSer-B2", "11-Can2LevSer-B2", "11-Can2LevSer-B2", "11-Can2LevSer-B2", "11-Can2LevSer-B2", "11-Can2LevSer-B2", "11-Can2LevSer-B2", "11-Can2LevSer-B2", "11-Can7LevSte-B7", "11-Can7LevSte-B7", "11-Can7LevSte-B7", "11-Can7LevSte-B7", "11-Can7LevSte-B7", "11-Can7LevSte-B7", "11-Can7LevSte-B7", "11-Can7LevSte-B7", "11-Gre4LevSte-B4", "11-Gre4LevSte-B4", "11-Gre4LevSte-B4", "11-Gre4LevSte-B4", "11-Gre4LevSte-B4", "11-Gre4LevSte-B4", "11-Gre4LevSte-B4", "11-Gre4LevSte-B4", "11-Gre9BacNon-B9", "11-Gre9BacNon-B9", "11-Gre9BacNon-B9", "11-Gre9BacNon-B9", "11-Gre9BacNon-B9", "11-Gre9BacNon-B9", "11-Gre9BacNon-B9", "11-Gre9BacNon-B9", "11-Ita10ConNon-B10", "11-Ita10ConNon-B10", "11-Ita10ConNon-B10", "11-Ita10ConNon-B10", "11-Ita10ConNon-B10", "11-Ita10ConNon-B10", "11-Ita10ConNon-B10", "11-Ita10ConNon-B10", "11-Ita1ConNon-B1", "11-Ita1ConNon-B1", "11-Ita1ConNon-B1", "11-Ita1ConNon-B1", "11-Ita1ConNon-B1", "11-Ita1ConNon-B1", "11-Ita1ConNon-B1", "11-Ita1ConNon-B1", "11-Ita3BacSer-B3", "11-Ita3BacSer-B3", "11-Ita3BacSer-B3", "11-Ita3BacSer-B3", "11-Ita3BacSer-B3", "11-Ita3BacSer-B3", "11-Ita3BacSer-B3", "11-Ita3BacSer-B3", "11-Ita5ConSte-B5", "11-Ita5ConSte-B5", "11-Ita5ConSte-B5", "11-Ita5ConSte-B5", "11-Ita5ConSte-B5", "11-Ita5ConSte-B5", "11-Ita5ConSte-B5", "11-Ita5ConSte-B5", "11-Ita6BacSte-B6", "11-Ita6BacSte-B6", "11-Ita6BacSte-B6", "11-Ita6BacSte-B6", "11-Ita6BacSte-B6", "11-Ita6BacSte-B6", "11-Ita6BacSte-B6", "11-Ita6BacSte-B6", "11-Ita8BacSer-B8", "11-Ita8BacSer-B8", "11-Ita8BacSer-B8", "11-Ita8BacSer-B8", "11-Ita8BacSer-B8", "11-Ita8BacSer-B8", "11-Ita8BacSer-B8", "11-Ita8BacSer-B8", "12-Can1ConNon-B1", "12-Can1ConNon-B1", "12-Can1ConNon-B1", "12-Can1ConNon-B1", "12-Can1ConNon-B1", "12-Can1ConNon-B1", "12-Can1ConNon-B1", "12-Can1ConNon-B1", "12-Can3BacSer-B3", "12-Can3BacSer-B3", "12-Can3BacSer-B3", "12-Can3BacSer-B3", "12-Can3BacSer-B3", "12-Can3BacSer-B3", "12-Can3BacSer-B3", "12-Can3BacSer-B3", "12-Can5ConSte-B5", "12-Can5ConSte-B5", "12-Can5ConSte-B5", "12-Can5ConSte-B5", "12-Can5ConSte-B5", "12-Can5ConSte-B5", "12-Can5ConSte-B5", "12-Can5ConSte-B5", "12-Can8BacSer-B8", "12-Can8BacSer-B8", "12-Can8BacSer-B8", "12-Can8BacSer-B8", "12-Can8BacSer-B8", "12-Can8BacSer-B8", "12-Can8BacSer-B8", "12-Can8BacSer-B8", "12-Can9BacNon-B9", "12-Can9BacNon-B9", "12-Can9BacNon-B9", "12-Can9BacNon-B9", "12-Can9BacNon-B9", "12-Can9BacNon-B9", "12-Can9BacNon-B9", "12-Can9BacNon-B9", "12-Gre10ConNon-B10", "12-Gre10ConNon-B10", "12-Gre10ConNon-B10", "12-Gre10ConNon-B10", "12-Gre10ConNon-B10", "12-Gre10ConNon-B10", "12-Gre10ConNon-B10", "12-Gre10ConNon-B10", "12-Gre6BacSte-B6", "12-Gre6BacSte-B6", "12-Gre6BacSte-B6", "12-Gre6BacSte-B6", "12-Gre6BacSte-B6", "12-Gre6BacSte-B6", "12-Gre6BacSte-B6", "12-Gre6BacSte-B6", "12-Gre7LevSte-B7", "12-Gre7LevSte-B7", "12-Gre7LevSte-B7", "12-Gre7LevSte-B7", "12-Gre7LevSte-B7", "12-Gre7LevSte-B7", "12-Gre7LevSte-B7", "12-Gre7LevSte-B7", "12-Ita2LevSer-B2", "12-Ita2LevSer-B2", "12-Ita2LevSer-B2", "12-Ita2LevSer-B2", "12-Ita2LevSer-B2", "12-Ita2LevSer-B2", "12-Ita2LevSer-B2", "12-Ita2LevSer-B2", "12-Ita4LevSte-B4", "12-Ita4LevSte-B4", "12-Ita4LevSte-B4", "12-Ita4LevSte-B4", "12-Ita4LevSte-B4", "12-Ita4LevSte-B4", "12-Ita4LevSte-B4", "12-Ita4LevSte-B4", "13-Can10BacSte-B10", "13-Can10BacSte-B10", "13-Can10BacSte-B10", "13-Can10BacSte-B10", "13-Can10BacSte-B10", "13-Can10BacSte-B10", "13-Can10BacSte-B10", "13-Can10BacSte-B10", "13-Can4ConSte-B4", "13-Can4ConSte-B4", "13-Can4ConSte-B4", "13-Can4ConSte-B4", "13-Can4ConSte-B4", "13-Can4ConSte-B4", "13-Can4ConSte-B4", "13-Can4ConSte-B4", "13-Can7BacSte-B7", "13-Can7BacSte-B7", "13-Can7BacSte-B7", "13-Can7BacSte-B7", "13-Can7BacSte-B7", "13-Can7BacSte-B7", "13-Can7BacSte-B7", "13-Can7BacSte-B7", "13-Gre1BacSte-B1", "13-Gre1BacSte-B1", "13-Gre1BacSte-B1", "13-Gre1BacSte-B1", "13-Gre1BacSte-B1", "13-Gre1BacSte-B1", "13-Gre1BacSte-B1", "13-Gre1BacSte-B1", "13-Gre2LevSte-B2", "13-Gre2LevSte-B2", "13-Gre2LevSte-B2", "13-Gre2LevSte-B2", "13-Gre2LevSte-B2", "13-Gre2LevSte-B2", "13-Gre2LevSte-B2", "13-Gre2LevSte-B2", "13-Gre5LevNon-B5", "13-Gre5LevNon-B5", "13-Gre5LevNon-B5", "13-Gre5LevNon-B5", "13-Gre5LevNon-B5", "13-Gre5LevNon-B5", "13-Gre5LevNon-B5", "13-Gre5LevNon-B5", "13-Gre8LevSte-B8", "13-Gre8LevSte-B8", "13-Gre8LevSte-B8", "13-Gre8LevSte-B8", "13-Gre8LevSte-B8", "13-Gre8LevSte-B8", "13-Gre8LevSte-B8", "13-Gre8LevSte-B8", "13-Ita3ConNon-B3", "13-Ita3ConNon-B3", "13-Ita3ConNon-B3", "13-Ita3ConNon-B3", "13-Ita3ConNon-B3", "13-Ita3ConNon-B3", "13-Ita3ConNon-B3", "13-Ita3ConNon-B3", "13-Ita6LevSer-B6", "13-Ita6LevSer-B6", "13-Ita6LevSer-B6", "13-Ita6LevSer-B6", "13-Ita6LevSer-B6", "13-Ita6LevSer-B6", "13-Ita6LevSer-B6", "13-Ita6LevSer-B6", "13-Ita9ConSte-B9", "13-Ita9ConSte-B9", "13-Ita9ConSte-B9", "13-Ita9ConSte-B9", "13-Ita9ConSte-B9", "13-Ita9ConSte-B9", "13-Ita9ConSte-B9", "13-Ita9ConSte-B9", "14-Can2LevSte-B2", "14-Can2LevSte-B2", "14-Can2LevSte-B2", "14-Can2LevSte-B2", "14-Can2LevSte-B2", "14-Can2LevSte-B2", "14-Can2LevSte-B2", "14-Can2LevSte-B2", "14-Gre10BacSte-B10", "14-Gre10BacSte-B10", "14-Gre10BacSte-B10", "14-Gre10BacSte-B10", "14-Gre10BacSte-B10", "14-Gre10BacSte-B10", "14-Gre10BacSte-B10", "14-Gre10BacSte-B10", "14-Gre3ConNon-B3", "14-Gre3ConNon-B3", "14-Gre3ConNon-B3", "14-Gre3ConNon-B3", "14-Gre3ConNon-B3", "14-Gre3ConNon-B3", "14-Gre3ConNon-B3", "14-Gre3ConNon-B3", "14-Gre4ConSte-B4", "14-Gre4ConSte-B4", "14-Gre4ConSte-B4", "14-Gre4ConSte-B4", "14-Gre4ConSte-B4", "14-Gre4ConSte-B4", "14-Gre4ConSte-B4", "14-Gre4ConSte-B4", "14-Gre6LevSer-B6", "14-Gre6LevSer-B6", "14-Gre6LevSer-B6", "14-Gre6LevSer-B6", "14-Gre6LevSer-B6", "14-Gre6LevSer-B6", "14-Gre6LevSer-B6", "14-Gre6LevSer-B6", "14-Gre7BacSte-B7", "14-Gre7BacSte-B7", "14-Gre7BacSte-B7", "14-Gre7BacSte-B7", "14-Gre7BacSte-B7", "14-Gre7BacSte-B7", "14-Gre7BacSte-B7", "14-Gre7BacSte-B7", "14-Gre9ConSte-B9", "14-Gre9ConSte-B9", "14-Gre9ConSte-B9", "14-Gre9ConSte-B9", "14-Gre9ConSte-B9", "14-Gre9ConSte-B9", "14-Gre9ConSte-B9", "14-Gre9ConSte-B9", "14-Ita1BacSte-B1", "14-Ita1BacSte-B1", "14-Ita1BacSte-B1", "14-Ita1BacSte-B1", "14-Ita1BacSte-B1", "14-Ita1BacSte-B1", "14-Ita1BacSte-B1", "14-Ita1BacSte-B1", "14-Ita5LevNon-B5", "14-Ita5LevNon-B5", "14-Ita5LevNon-B5", "14-Ita5LevNon-B5", "14-Ita5LevNon-B5", "14-Ita5LevNon-B5", "14-Ita5LevNon-B5", "14-Ita5LevNon-B5", "14-Ita8LevSte-B8", "14-Ita8LevSte-B8", "14-Ita8LevSte-B8", "14-Ita8LevSte-B8", "14-Ita8LevSte-B8", "14-Ita8LevSte-B8", "14-Ita8LevSte-B8", "14-Ita8LevSte-B8", "15-Can1BacSte-B1", "15-Can1BacSte-B1", "15-Can1BacSte-B1", "15-Can1BacSte-B1", "15-Can1BacSte-B1", "15-Can1BacSte-B1", "15-Can1BacSte-B1", "15-Can1BacSte-B1", "15-Can3ConNon-B3", "15-Can3ConNon-B3", "15-Can3ConNon-B3", "15-Can3ConNon-B3", "15-Can3ConNon-B3", "15-Can3ConNon-B3", "15-Can3ConNon-B3", "15-Can3ConNon-B3", "15-Can5LevNon-B5", "15-Can5LevNon-B5", "15-Can5LevNon-B5", "15-Can5LevNon-B5", "15-Can5LevNon-B5", "15-Can5LevNon-B5", "15-Can5LevNon-B5", "15-Can5LevNon-B5", "15-Can6LevSer-B6", "15-Can6LevSer-B6", "15-Can6LevSer-B6", "15-Can6LevSer-B6", "15-Can6LevSer-B6", "15-Can6LevSer-B6", "15-Can6LevSer-B6", "15-Can6LevSer-B6", "15-Can8LevSte-B8", "15-Can8LevSte-B8", "15-Can8LevSte-B8", "15-Can8LevSte-B8", "15-Can8LevSte-B8", "15-Can8LevSte-B8", "15-Can8LevSte-B8", "15-Can8LevSte-B8", "15-Can9ConSte-B9", "15-Can9ConSte-B9", "15-Can9ConSte-B9", "15-Can9ConSte-B9", "15-Can9ConSte-B9", "15-Can9ConSte-B9", "15-Can9ConSte-B9", "15-Can9ConSte-B9", "15-Ita10BacSte-B10", "15-Ita10BacSte-B10", "15-Ita10BacSte-B10", "15-Ita10BacSte-B10", "15-Ita10BacSte-B10", "15-Ita10BacSte-B10", "15-Ita10BacSte-B10", "15-Ita10BacSte-B10", "15-Ita2LevSte-B2", "15-Ita2LevSte-B2", "15-Ita2LevSte-B2", "15-Ita2LevSte-B2", "15-Ita2LevSte-B2", "15-Ita2LevSte-B2", "15-Ita2LevSte-B2", "15-Ita2LevSte-B2", "15-Ita4ConSte-B4", "15-Ita4ConSte-B4", "15-Ita4ConSte-B4", "15-Ita4ConSte-B4", "15-Ita4ConSte-B4", "15-Ita4ConSte-B4", "15-Ita4ConSte-B4", "15-Ita4ConSte-B4", "15-Ita7BacSte-B7", "15-Ita7BacSte-B7", "15-Ita7BacSte-B7", "15-Ita7BacSte-B7", "15-Ita7BacSte-B7", "15-Ita7BacSte-B7", "15-Ita7BacSte-B7", "15-Ita7BacSte-B7", "16-Can5BacNon-B5", "16-Can5BacNon-B5", "16-Can5BacNon-B5", "16-Can5BacNon-B5", "16-Can5BacNon-B5", "16-Can5BacNon-B5", "16-Can5BacNon-B5", "16-Can5BacNon-B5", "16-Can6BacNon-B6", "16-Can6BacNon-B6", "16-Can6BacNon-B6", "16-Can6BacNon-B6", "16-Can6BacNon-B6", "16-Can6BacNon-B6", "16-Can6BacNon-B6", "16-Can6BacNon-B6", "16-Can8BacNon-B8", "16-Can8BacNon-B8", "16-Can8BacNon-B8", "16-Can8BacNon-B8", "16-Can8BacNon-B8", "16-Can8BacNon-B8", "16-Can8BacNon-B8", "16-Can8BacNon-B8", "16-Can9LevNon-B9", "16-Can9LevNon-B9", "16-Can9LevNon-B9", "16-Can9LevNon-B9", "16-Can9LevNon-B9", "16-Can9LevNon-B9", "16-Can9LevNon-B9", "16-Can9LevNon-B9", "16-Gre2ConSer-B2", "16-Gre2ConSer-B2", "16-Gre2ConSer-B2", "16-Gre2ConSer-B2", "16-Gre2ConSer-B2", "16-Gre2ConSer-B2", "16-Gre2ConSer-B2", "16-Gre2ConSer-B2", "16-Gre7ConNon-B7", "16-Gre7ConNon-B7", "16-Gre7ConNon-B7", "16-Gre7ConNon-B7", "16-Gre7ConNon-B7", "16-Gre7ConNon-B7", "16-Gre7ConNon-B7", "16-Gre7ConNon-B7", "16-Ita10BacNon-B10", "16-Ita10BacNon-B10", "16-Ita10BacNon-B10", "16-Ita10BacNon-B10", "16-Ita10BacNon-B10", "16-Ita10BacNon-B10", "16-Ita10BacNon-B10", "16-Ita10BacNon-B10", "16-Ita1ConSte-B1", "16-Ita1ConSte-B1", "16-Ita1ConSte-B1", "16-Ita1ConSte-B1", "16-Ita1ConSte-B1", "16-Ita1ConSte-B1", "16-Ita1ConSte-B1", "16-Ita1ConSte-B1", "16-Ita3BacNon-B3", "16-Ita3BacNon-B3", "16-Ita3BacNon-B3", "16-Ita3BacNon-B3", "16-Ita3BacNon-B3", "16-Ita3BacNon-B3", "16-Ita3BacNon-B3", "16-Ita3BacNon-B3", "16-Ita4LevSer-B4", "16-Ita4LevSer-B4", "16-Ita4LevSer-B4", "16-Ita4LevSer-B4", "16-Ita4LevSer-B4", "16-Ita4LevSer-B4", "16-Ita4LevSer-B4", "16-Ita4LevSer-B4", "17-Can10BacNon-B10", "17-Can10BacNon-B10", "17-Can10BacNon-B10", "17-Can10BacNon-B10", "17-Can10BacNon-B10", "17-Can10BacNon-B10", "17-Can10BacNon-B10", "17-Can10BacNon-B10", "17-Can1ConSte-B1", "17-Can1ConSte-B1", "17-Can1ConSte-B1", "17-Can1ConSte-B1", "17-Can1ConSte-B1", "17-Can1ConSte-B1", "17-Can1ConSte-B1", "17-Can1ConSte-B1", "17-Can3BacNon-B3", "17-Can3BacNon-B3", "17-Can3BacNon-B3", "17-Can3BacNon-B3", "17-Can3BacNon-B3", "17-Can3BacNon-B3", "17-Can3BacNon-B3", "17-Can3BacNon-B3", "17-Can7ConNon-B7", "17-Can7ConNon-B7", "17-Can7ConNon-B7", "17-Can7ConNon-B7", "17-Can7ConNon-B7", "17-Can7ConNon-B7", "17-Can7ConNon-B7", "17-Can7ConNon-B7", "17-Gre4LevSer-B4", "17-Gre4LevSer-B4", "17-Gre4LevSer-B4", "17-Gre4LevSer-B4", "17-Gre4LevSer-B4", "17-Gre4LevSer-B4", "17-Gre4LevSer-B4", "17-Gre4LevSer-B4", "17-Gre8BacNon-B8", "17-Gre8BacNon-B8", "17-Gre8BacNon-B8", "17-Gre8BacNon-B8", "17-Gre8BacNon-B8", "17-Gre8BacNon-B8", "17-Gre8BacNon-B8", "17-Gre8BacNon-B8", "17-Gre9LevNon-B9", "17-Gre9LevNon-B9", "17-Gre9LevNon-B9", "17-Gre9LevNon-B9", "17-Gre9LevNon-B9", "17-Gre9LevNon-B9", "17-Gre9LevNon-B9", "17-Gre9LevNon-B9", "17-Ita2ConSer-B2", "17-Ita2ConSer-B2", "17-Ita2ConSer-B2", "17-Ita2ConSer-B2", "17-Ita2ConSer-B2", "17-Ita2ConSer-B2", "17-Ita2ConSer-B2", "17-Ita2ConSer-B2", "17-Ita5BacNon-B5", "17-Ita5BacNon-B5", "17-Ita5BacNon-B5", "17-Ita5BacNon-B5", "17-Ita5BacNon-B5", "17-Ita5BacNon-B5", "17-Ita5BacNon-B5", "17-Ita5BacNon-B5", "17-Ita6BacNon-B6", "17-Ita6BacNon-B6", "17-Ita6BacNon-B6", "17-Ita6BacNon-B6", "17-Ita6BacNon-B6", "17-Ita6BacNon-B6", "17-Ita6BacNon-B6", "17-Ita6BacNon-B6", "18-Can2ConSer-B2", "18-Can2ConSer-B2", "18-Can2ConSer-B2", "18-Can2ConSer-B2", "18-Can2ConSer-B2", "18-Can2ConSer-B2", "18-Can2ConSer-B2", "18-Can2ConSer-B2", "18-Can4LevSer-B4", "18-Can4LevSer-B4", "18-Can4LevSer-B4", "18-Can4LevSer-B4", "18-Can4LevSer-B4", "18-Can4LevSer-B4", "18-Can4LevSer-B4", "18-Can4LevSer-B4", "18-Gre10BacNon-B10", "18-Gre10BacNon-B10", "18-Gre10BacNon-B10", "18-Gre10BacNon-B10", "18-Gre10BacNon-B10", "18-Gre10BacNon-B10", "18-Gre10BacNon-B10", "18-Gre10BacNon-B10", "18-Gre1ConSte-B1", "18-Gre1ConSte-B1", "18-Gre1ConSte-B1", "18-Gre1ConSte-B1", "18-Gre1ConSte-B1", "18-Gre1ConSte-B1", "18-Gre1ConSte-B1", "18-Gre1ConSte-B1", "18-Gre3BacNon-B3", "18-Gre3BacNon-B3", "18-Gre3BacNon-B3", "18-Gre3BacNon-B3", "18-Gre3BacNon-B3", "18-Gre3BacNon-B3", "18-Gre3BacNon-B3", "18-Gre3BacNon-B3", "18-Gre5BacNon-B5", "18-Gre5BacNon-B5", "18-Gre5BacNon-B5", "18-Gre5BacNon-B5", "18-Gre5BacNon-B5", "18-Gre5BacNon-B5", "18-Gre5BacNon-B5", "18-Gre5BacNon-B5", "18-Gre6BacNon-B6", "18-Gre6BacNon-B6", "18-Gre6BacNon-B6", "18-Gre6BacNon-B6", "18-Gre6BacNon-B6", "18-Gre6BacNon-B6", "18-Gre6BacNon-B6", "18-Gre6BacNon-B6", "18-Ita7ConNon-B7", "18-Ita7ConNon-B7", "18-Ita7ConNon-B7", "18-Ita7ConNon-B7", "18-Ita7ConNon-B7", "18-Ita7ConNon-B7", "18-Ita7ConNon-B7", "18-Ita7ConNon-B7", "18-Ita8BacNon-B8", "18-Ita8BacNon-B8", "18-Ita8BacNon-B8", "18-Ita8BacNon-B8", "18-Ita8BacNon-B8", "18-Ita8BacNon-B8", "18-Ita8BacNon-B8", "18-Ita8BacNon-B8", "18-Ita9LevNon-B9", "18-Ita9LevNon-B9", "18-Ita9LevNon-B9", "18-Ita9LevNon-B9", "18-Ita9LevNon-B9", "18-Ita9LevNon-B9", "18-Ita9LevNon-B9", "18-Ita9LevNon-B9", "19-Can3ConSte-B3", "19-Can3ConSte-B3", "19-Can3ConSte-B3", "19-Can3ConSte-B3", "19-Can3ConSte-B3", "19-Can3ConSte-B3", "19-Can3ConSte-B3", "19-Can3ConSte-B3", "19-Gre1LevSte-B1", "19-Gre1LevSte-B1", "19-Gre1LevSte-B1", "19-Gre1LevSte-B1", "19-Gre1LevSte-B1", "19-Gre1LevSte-B1", "19-Gre1LevSte-B1", "19-Gre1LevSte-B1", "19-Gre2ConSte-B2", "19-Gre2ConSte-B2", "19-Gre2ConSte-B2", "19-Gre2ConSte-B2", "19-Gre2ConSte-B2", "19-Gre2ConSte-B2", "19-Gre2ConSte-B2", "19-Gre2ConSte-B2", "19-Gre7ConSte-B7", "19-Gre7ConSte-B7", "19-Gre7ConSte-B7", "19-Gre7ConSte-B7", "19-Gre7ConSte-B7", "19-Gre7ConSte-B7", "19-Gre7ConSte-B7", "19-Gre7ConSte-B7", "19-Gre9BacSer-B9", "19-Gre9BacSer-B9", "19-Gre9BacSer-B9", "19-Gre9BacSer-B9", "19-Gre9BacSer-B9", "19-Gre9BacSer-B9", "19-Gre9BacSer-B9", "19-Gre9BacSer-B9", "19-Ita10LevSte-B10", "19-Ita10LevSte-B10", "19-Ita10LevSte-B10", "19-Ita10LevSte-B10", "19-Ita10LevSte-B10", "19-Ita10LevSte-B10", "19-Ita10LevSte-B10", "19-Ita10LevSte-B10", "19-Ita4LevNon-B4", "19-Ita4LevNon-B4", "19-Ita4LevNon-B4", "19-Ita4LevNon-B4", "19-Ita4LevNon-B4", "19-Ita4LevNon-B4", "19-Ita4LevNon-B4", "19-Ita4LevNon-B4", "19-Ita5BacSte-B5", "19-Ita5BacSte-B5", "19-Ita5BacSte-B5", "19-Ita5BacSte-B5", "19-Ita5BacSte-B5", "19-Ita5BacSte-B5", "19-Ita5BacSte-B5", "19-Ita5BacSte-B5", "19-Ita6LevSte-B6", "19-Ita6LevSte-B6", "19-Ita6LevSte-B6", "19-Ita6LevSte-B6", "19-Ita6LevSte-B6", "19-Ita6LevSte-B6", "19-Ita6LevSte-B6", "19-Ita6LevSte-B6", "19-Ita8LevSer-B8", "19-Ita8LevSer-B8", "19-Ita8LevSer-B8", "19-Ita8LevSer-B8", "19-Ita8LevSer-B8", "19-Ita8LevSer-B8", "19-Ita8LevSer-B8", "19-Ita8LevSer-B8", "2-Can10LevNon-B10", "2-Can10LevNon-B10", "2-Can10LevNon-B10", "2-Can10LevNon-B10", "2-Can10LevNon-B10", "2-Can10LevNon-B10", "2-Can10LevNon-B10", "2-Can10LevNon-B10", "2-Can1LevSer-B1", "2-Can1LevSer-B1", "2-Can1LevSer-B1", "2-Can1LevSer-B1", "2-Can1LevSer-B1", "2-Can1LevSer-B1", "2-Can1LevSer-B1", "2-Can1LevSer-B1", "2-Can7BacNon-B7", "2-Can7BacNon-B7", "2-Can7BacNon-B7", "2-Can7BacNon-B7", "2-Can7BacNon-B7", "2-Can7BacNon-B7", "2-Can7BacNon-B7", "2-Can7BacNon-B7", "2-Can8BacSte-B8", "2-Can8BacSte-B8", "2-Can8BacSte-B8", "2-Can8BacSte-B8", "2-Can8BacSte-B8", "2-Can8BacSte-B8", "2-Can8BacSte-B8", "2-Can8BacSte-B8", "2-Gre5LevSer-B5", "2-Gre5LevSer-B5", "2-Gre5LevSer-B5", "2-Gre5LevSer-B5", "2-Gre5LevSer-B5", "2-Gre5LevSer-B5", "2-Gre5LevSer-B5", "2-Gre5LevSer-B5", "2-Gre6ConNon-B6", "2-Gre6ConNon-B6", "2-Gre6ConNon-B6", "2-Gre6ConNon-B6", "2-Gre6ConNon-B6", "2-Gre6ConNon-B6", "2-Gre6ConNon-B6", "2-Gre6ConNon-B6", "2-Ita2ConNon-B2", "2-Ita2ConNon-B2", "2-Ita2ConNon-B2", "2-Ita2ConNon-B2", "2-Ita2ConNon-B2", "2-Ita2ConNon-B2", "2-Ita2ConNon-B2", "2-Ita2ConNon-B2", "2-Ita3LevSte-B3", "2-Ita3LevSte-B3", "2-Ita3LevSte-B3", "2-Ita3LevSte-B3", "2-Ita3LevSte-B3", "2-Ita3LevSte-B3", "2-Ita3LevSte-B3", "2-Ita3LevSte-B3", "2-Ita4ConSer-B4", "2-Ita4ConSer-B4", "2-Ita4ConSer-B4", "2-Ita4ConSer-B4", "2-Ita4ConSer-B4", "2-Ita4ConSer-B4", "2-Ita4ConSer-B4", "2-Ita4ConSer-B4", "2-Ita9ConSer-B9", "2-Ita9ConSer-B9", "2-Ita9ConSer-B9", "2-Ita9ConSer-B9", "2-Ita9ConSer-B9", "2-Ita9ConSer-B9", "2-Ita9ConSer-B9", "2-Ita9ConSer-B9", "20-Can10LevSte-B10", "20-Can10LevSte-B10", "20-Can10LevSte-B10", "20-Can10LevSte-B10", "20-Can10LevSte-B10", "20-Can10LevSte-B10", "20-Can10LevSte-B10", "20-Can10LevSte-B10", "20-Can4LevNon-B4", "20-Can4LevNon-B4", "20-Can4LevNon-B4", "20-Can4LevNon-B4", "20-Can4LevNon-B4", "20-Can4LevNon-B4", "20-Can4LevNon-B4", "20-Can4LevNon-B4", "20-Can8LevSer-B8", "20-Can8LevSer-B8", "20-Can8LevSer-B8", "20-Can8LevSer-B8", "20-Can8LevSer-B8", "20-Can8LevSer-B8", "20-Can8LevSer-B8", "20-Can8LevSer-B8", "20-Gre3ConSte-B3", "20-Gre3ConSte-B3", "20-Gre3ConSte-B3", "20-Gre3ConSte-B3", "20-Gre3ConSte-B3", "20-Gre3ConSte-B3", "20-Gre3ConSte-B3", "20-Gre3ConSte-B3", "20-Gre5BacSte-B5", "20-Gre5BacSte-B5", "20-Gre5BacSte-B5", "20-Gre5BacSte-B5", "20-Gre5BacSte-B5", "20-Gre5BacSte-B5", "20-Gre5BacSte-B5", "20-Gre5BacSte-B5", "20-Gre6LevSte-B6", "20-Gre6LevSte-B6", "20-Gre6LevSte-B6", "20-Gre6LevSte-B6", "20-Gre6LevSte-B6", "20-Gre6LevSte-B6", "20-Gre6LevSte-B6", "20-Gre6LevSte-B6", "20-Ita1LevSte-B1", "20-Ita1LevSte-B1", "20-Ita1LevSte-B1", "20-Ita1LevSte-B1", "20-Ita1LevSte-B1", "20-Ita1LevSte-B1", "20-Ita1LevSte-B1", "20-Ita1LevSte-B1", "20-Ita2ConSte-B2", "20-Ita2ConSte-B2", "20-Ita2ConSte-B2", "20-Ita2ConSte-B2", "20-Ita2ConSte-B2", "20-Ita2ConSte-B2", "20-Ita2ConSte-B2", "20-Ita2ConSte-B2", "20-Ita7ConSte-B7", "20-Ita7ConSte-B7", "20-Ita7ConSte-B7", "20-Ita7ConSte-B7", "20-Ita7ConSte-B7", "20-Ita7ConSte-B7", "20-Ita7ConSte-B7", "20-Ita7ConSte-B7", "20-Ita9BacSer-B9", "20-Ita9BacSer-B9", "20-Ita9BacSer-B9", "20-Ita9BacSer-B9", "20-Ita9BacSer-B9", "20-Ita9BacSer-B9", "20-Ita9BacSer-B9", "20-Ita9BacSer-B9", "21-Can1LevSte-B1", "21-Can1LevSte-B1", "21-Can1LevSte-B1", "21-Can1LevSte-B1", "21-Can1LevSte-B1", "21-Can1LevSte-B1", "21-Can1LevSte-B1", "21-Can1LevSte-B1", "21-Can2ConSte-B2", "21-Can2ConSte-B2", "21-Can2ConSte-B2", "21-Can2ConSte-B2", "21-Can2ConSte-B2", "21-Can2ConSte-B2", "21-Can2ConSte-B2", "21-Can2ConSte-B2", "21-Can5BacSte-B5", "21-Can5BacSte-B5", "21-Can5BacSte-B5", "21-Can5BacSte-B5", "21-Can5BacSte-B5", "21-Can5BacSte-B5", "21-Can5BacSte-B5", "21-Can5BacSte-B5", "21-Can6LevSte-B6", "21-Can6LevSte-B6", "21-Can6LevSte-B6", "21-Can6LevSte-B6", "21-Can6LevSte-B6", "21-Can6LevSte-B6", "21-Can6LevSte-B6", "21-Can6LevSte-B6", "21-Can7ConSte-B7", "21-Can7ConSte-B7", "21-Can7ConSte-B7", "21-Can7ConSte-B7", "21-Can7ConSte-B7", "21-Can7ConSte-B7", "21-Can7ConSte-B7", "21-Can7ConSte-B7", "21-Can9BacSer-B9", "21-Can9BacSer-B9", "21-Can9BacSer-B9", "21-Can9BacSer-B9", "21-Can9BacSer-B9", "21-Can9BacSer-B9", "21-Can9BacSer-B9", "21-Can9BacSer-B9", "21-Gre10LevSte-B10", "21-Gre10LevSte-B10", "21-Gre10LevSte-B10", "21-Gre10LevSte-B10", "21-Gre10LevSte-B10", "21-Gre10LevSte-B10", "21-Gre10LevSte-B10", "21-Gre10LevSte-B10", "21-Gre4LevNon-B4", "21-Gre4LevNon-B4", "21-Gre4LevNon-B4", "21-Gre4LevNon-B4", "21-Gre4LevNon-B4", "21-Gre4LevNon-B4", "21-Gre4LevNon-B4", "21-Gre4LevNon-B4", "21-Gre8LevSer-B8", "21-Gre8LevSer-B8", "21-Gre8LevSer-B8", "21-Gre8LevSer-B8", "21-Gre8LevSer-B8", "21-Gre8LevSer-B8", "21-Gre8LevSer-B8", "21-Gre8LevSer-B8", "21-Ita3ConSte-B3", "21-Ita3ConSte-B3", "21-Ita3ConSte-B3", "21-Ita3ConSte-B3", "21-Ita3ConSte-B3", "21-Ita3ConSte-B3", "21-Ita3ConSte-B3", "21-Ita3ConSte-B3", "22-Can1BacSer-B1", "22-Can1BacSer-B1", "22-Can1BacSer-B1", "22-Can1BacSer-B1", "22-Can1BacSer-B1", "22-Can1BacSer-B1", "22-Can1BacSer-B1", "22-Can1BacSer-B1", "22-Can4BacSer-B4", "22-Can4BacSer-B4", "22-Can4BacSer-B4", "22-Can4BacSer-B4", "22-Can4BacSer-B4", "22-Can4BacSer-B4", "22-Can4BacSer-B4", "22-Can4BacSer-B4", "22-Can9LevSte-B9", "22-Can9LevSte-B9", "22-Can9LevSte-B9", "22-Can9LevSte-B9", "22-Can9LevSte-B9", "22-Can9LevSte-B9", "22-Can9LevSte-B9", "22-Can9LevSte-B9", "22-Gre2BacSer-B2", "22-Gre2BacSer-B2", "22-Gre2BacSer-B2", "22-Gre2BacSer-B2", "22-Gre2BacSer-B2", "22-Gre2BacSer-B2", "22-Gre2BacSer-B2", "22-Gre2BacSer-B2", "22-Gre3LevSer-B3", "22-Gre3LevSer-B3", "22-Gre3LevSer-B3", "22-Gre3LevSer-B3", "22-Gre3LevSer-B3", "22-Gre3LevSer-B3", "22-Gre3LevSer-B3", "22-Gre3LevSer-B3", "22-Gre5LevSte-B5", "22-Gre5LevSte-B5", "22-Gre5LevSte-B5", "22-Gre5LevSte-B5", "22-Gre5LevSte-B5", "22-Gre5LevSte-B5", "22-Gre5LevSte-B5", "22-Gre5LevSte-B5", "22-Ita10ConSer-B10", "22-Ita10ConSer-B10", "22-Ita10ConSer-B10", "22-Ita10ConSer-B10", "22-Ita10ConSer-B10", "22-Ita10ConSer-B10", "22-Ita10ConSer-B10", "22-Ita10ConSer-B10", "22-Ita6ConSer-B6", "22-Ita6ConSer-B6", "22-Ita6ConSer-B6", "22-Ita6ConSer-B6", "22-Ita6ConSer-B6", "22-Ita6ConSer-B6", "22-Ita6ConSer-B6", "22-Ita6ConSer-B6", "22-Ita7ConSer-B7", "22-Ita7ConSer-B7", "22-Ita7ConSer-B7", "22-Ita7ConSer-B7", "22-Ita7ConSer-B7", "22-Ita7ConSer-B7", "22-Ita7ConSer-B7", "22-Ita7ConSer-B7", "22-Ita8ConSte-B8", "22-Ita8ConSte-B8", "22-Ita8ConSte-B8", "22-Ita8ConSte-B8", "22-Ita8ConSte-B8", "22-Ita8ConSte-B8", "22-Ita8ConSte-B8", "22-Ita8ConSte-B8", "23-Can10ConSer-B10", "23-Can10ConSer-B10", "23-Can10ConSer-B10", "23-Can10ConSer-B10", "23-Can10ConSer-B10", "23-Can10ConSer-B10", "23-Can10ConSer-B10", "23-Can10ConSer-B10", "23-Can2BacSer-B2", "23-Can2BacSer-B2", "23-Can2BacSer-B2", "23-Can2BacSer-B2", "23-Can2BacSer-B2", "23-Can2BacSer-B2", "23-Can2BacSer-B2", "23-Can2BacSer-B2", "23-Can7ConSer-B7", "23-Can7ConSer-B7", "23-Can7ConSer-B7", "23-Can7ConSer-B7", "23-Can7ConSer-B7", "23-Can7ConSer-B7", "23-Can7ConSer-B7", "23-Can7ConSer-B7", "23-Can8ConSte-B8", "23-Can8ConSte-B8", "23-Can8ConSte-B8", "23-Can8ConSte-B8", "23-Can8ConSte-B8", "23-Can8ConSte-B8", "23-Can8ConSte-B8", "23-Can8ConSte-B8", "23-Gre1BacSer-B1", "23-Gre1BacSer-B1", "23-Gre1BacSer-B1", "23-Gre1BacSer-B1", "23-Gre1BacSer-B1", "23-Gre1BacSer-B1", "23-Gre1BacSer-B1", "23-Gre1BacSer-B1", "23-Gre4BacSer-B4", "23-Gre4BacSer-B4", "23-Gre4BacSer-B4", "23-Gre4BacSer-B4", "23-Gre4BacSer-B4", "23-Gre4BacSer-B4", "23-Gre4BacSer-B4", "23-Gre4BacSer-B4", "23-Gre6ConSer-B6", "23-Gre6ConSer-B6", "23-Gre6ConSer-B6", "23-Gre6ConSer-B6", "23-Gre6ConSer-B6", "23-Gre6ConSer-B6", "23-Gre6ConSer-B6", "23-Gre6ConSer-B6", "23-Gre9LevSte-B9", "23-Gre9LevSte-B9", "23-Gre9LevSte-B9", "23-Gre9LevSte-B9", "23-Gre9LevSte-B9", "23-Gre9LevSte-B9", "23-Gre9LevSte-B9", "23-Gre9LevSte-B9", "23-Ita3LevSer-B3", "23-Ita3LevSer-B3", "23-Ita3LevSer-B3", "23-Ita3LevSer-B3", "23-Ita3LevSer-B3", "23-Ita3LevSer-B3", "23-Ita3LevSer-B3", "23-Ita3LevSer-B3", "23-Ita5LevSte-B5", "23-Ita5LevSte-B5", "23-Ita5LevSte-B5", "23-Ita5LevSte-B5", "23-Ita5LevSte-B5", "23-Ita5LevSte-B5", "23-Ita5LevSte-B5", "23-Ita5LevSte-B5", "24-Can3LevSer-B3", "24-Can3LevSer-B3", "24-Can3LevSer-B3", "24-Can3LevSer-B3", "24-Can3LevSer-B3", "24-Can3LevSer-B3", "24-Can3LevSer-B3", "24-Can3LevSer-B3", "24-Can5LevSte-B5", "24-Can5LevSte-B5", "24-Can5LevSte-B5", "24-Can5LevSte-B5", "24-Can5LevSte-B5", "24-Can5LevSte-B5", "24-Can5LevSte-B5", "24-Can5LevSte-B5", "24-Can6ConSer-B6", "24-Can6ConSer-B6", "24-Can6ConSer-B6", "24-Can6ConSer-B6", "24-Can6ConSer-B6", "24-Can6ConSer-B6", "24-Can6ConSer-B6", "24-Can6ConSer-B6", "24-Gre10ConSer-B10", "24-Gre10ConSer-B10", "24-Gre10ConSer-B10", "24-Gre10ConSer-B10", "24-Gre10ConSer-B10", "24-Gre10ConSer-B10", "24-Gre10ConSer-B10", "24-Gre10ConSer-B10", "24-Gre7ConSer-B7", "24-Gre7ConSer-B7", "24-Gre7ConSer-B7", "24-Gre7ConSer-B7", "24-Gre7ConSer-B7", "24-Gre7ConSer-B7", "24-Gre7ConSer-B7", "24-Gre7ConSer-B7", "24-Gre8ConSte-B8", "24-Gre8ConSte-B8", "24-Gre8ConSte-B8", "24-Gre8ConSte-B8", "24-Gre8ConSte-B8", "24-Gre8ConSte-B8", "24-Gre8ConSte-B8", "24-Gre8ConSte-B8", "24-Ita1BacSer-B1", "24-Ita1BacSer-B1", "24-Ita1BacSer-B1", "24-Ita1BacSer-B1", "24-Ita1BacSer-B1", "24-Ita1BacSer-B1", "24-Ita1BacSer-B1", "24-Ita1BacSer-B1", "24-Ita2BacSer-B2", "24-Ita2BacSer-B2", "24-Ita2BacSer-B2", "24-Ita2BacSer-B2", "24-Ita2BacSer-B2", "24-Ita2BacSer-B2", "24-Ita2BacSer-B2", "24-Ita2BacSer-B2", "24-Ita4BacSer-B4", "24-Ita4BacSer-B4", "24-Ita4BacSer-B4", "24-Ita4BacSer-B4", "24-Ita4BacSer-B4", "24-Ita4BacSer-B4", "24-Ita4BacSer-B4", "24-Ita4BacSer-B4", "24-Ita9LevSte-B9", "24-Ita9LevSte-B9", "24-Ita9LevSte-B9", "24-Ita9LevSte-B9", "24-Ita9LevSte-B9", "24-Ita9LevSte-B9", "24-Ita9LevSte-B9", "24-Ita9LevSte-B9", "25-Can1BacNon-B1", "25-Can1BacNon-B1", "25-Can1BacNon-B1", "25-Can1BacNon-B1", "25-Can1BacNon-B1", "25-Can1BacNon-B1", "25-Can1BacNon-B1", "25-Can1BacNon-B1", "25-Gre6LevNon-B6", "25-Gre6LevNon-B6", "25-Gre6LevNon-B6", "25-Gre6LevNon-B6", "25-Gre6LevNon-B6", "25-Gre6LevNon-B6", "25-Gre6LevNon-B6", "25-Gre6LevNon-B6", "25-Gre8LevNon-B8", "25-Gre8LevNon-B8", "25-Gre8LevNon-B8", "25-Gre8LevNon-B8", "25-Gre8LevNon-B8", "25-Gre8LevNon-B8", "25-Gre8LevNon-B8", "25-Gre8LevNon-B8", "25-Gre9ConNon-B9", "25-Gre9ConNon-B9", "25-Gre9ConNon-B9", "25-Gre9ConNon-B9", "25-Gre9ConNon-B9", "25-Gre9ConNon-B9", "25-Gre9ConNon-B9", "25-Gre9ConNon-B9", "25-Ita10BacSer-B10", "25-Ita10BacSer-B10", "25-Ita10BacSer-B10", "25-Ita10BacSer-B10", "25-Ita10BacSer-B10", "25-Ita10BacSer-B10", "25-Ita10BacSer-B10", "25-Ita10BacSer-B10", "25-Ita2BacNon-B2", "25-Ita2BacNon-B2", "25-Ita2BacNon-B2", "25-Ita2BacNon-B2", "25-Ita2BacNon-B2", "25-Ita2BacNon-B2", "25-Ita2BacNon-B2", "25-Ita2BacNon-B2", "25-Ita3BacSte-B3", "25-Ita3BacSte-B3", "25-Ita3BacSte-B3", "25-Ita3BacSte-B3", "25-Ita3BacSte-B3", "25-Ita3BacSte-B3", "25-Ita3BacSte-B3", "25-Ita3BacSte-B3", "25-Ita4ConNon-B4", "25-Ita4ConNon-B4", "25-Ita4ConNon-B4", "25-Ita4ConNon-B4", "25-Ita4ConNon-B4", "25-Ita4ConNon-B4", "25-Ita4ConNon-B4", "25-Ita4ConNon-B4", "25-Ita5ConSer-B5", "25-Ita5ConSer-B5", "25-Ita5ConSer-B5", "25-Ita5ConSer-B5", "25-Ita5ConSer-B5", "25-Ita5ConSer-B5", "25-Ita5ConSer-B5", "25-Ita5ConSer-B5", "25-Ita7LevSer-B7", "25-Ita7LevSer-B7", "25-Ita7LevSer-B7", "25-Ita7LevSer-B7", "25-Ita7LevSer-B7", "25-Ita7LevSer-B7", "25-Ita7LevSer-B7", "25-Ita7LevSer-B7", "26-Can10BacSer-B10", "26-Can10BacSer-B10", "26-Can10BacSer-B10", "26-Can10BacSer-B10", "26-Can10BacSer-B10", "26-Can10BacSer-B10", "26-Can10BacSer-B10", "26-Can10BacSer-B10", "26-Can5ConSer-B5", "26-Can5ConSer-B5", "26-Can5ConSer-B5", "26-Can5ConSer-B5", "26-Can5ConSer-B5", "26-Can5ConSer-B5", "26-Can5ConSer-B5", "26-Can5ConSer-B5", "26-Can7LevSer-B7", "26-Can7LevSer-B7", "26-Can7LevSer-B7", "26-Can7LevSer-B7", "26-Can7LevSer-B7", "26-Can7LevSer-B7", "26-Can7LevSer-B7", "26-Can7LevSer-B7", "26-Gre1BacNon-B1", "26-Gre1BacNon-B1", "26-Gre1BacNon-B1", "26-Gre1BacNon-B1", "26-Gre1BacNon-B1", "26-Gre1BacNon-B1", "26-Gre1BacNon-B1", "26-Gre1BacNon-B1", "26-Gre2BacNon-B2", "26-Gre2BacNon-B2", "26-Gre2BacNon-B2", "26-Gre2BacNon-B2", "26-Gre2BacNon-B2", "26-Gre2BacNon-B2", "26-Gre2BacNon-B2", "26-Gre2BacNon-B2", "26-Gre3BacSte-B3", "26-Gre3BacSte-B3", "26-Gre3BacSte-B3", "26-Gre3BacSte-B3", "26-Gre3BacSte-B3", "26-Gre3BacSte-B3", "26-Gre3BacSte-B3", "26-Gre3BacSte-B3", "26-Gre4ConNon-B4", "26-Gre4ConNon-B4", "26-Gre4ConNon-B4", "26-Gre4ConNon-B4", "26-Gre4ConNon-B4", "26-Gre4ConNon-B4", "26-Gre4ConNon-B4", "26-Gre4ConNon-B4", "26-Ita6LevNon-B6", "26-Ita6LevNon-B6", "26-Ita6LevNon-B6", "26-Ita6LevNon-B6", "26-Ita6LevNon-B6", "26-Ita6LevNon-B6", "26-Ita6LevNon-B6", "26-Ita6LevNon-B6", "26-Ita8LevNon-B8", "26-Ita8LevNon-B8", "26-Ita8LevNon-B8", "26-Ita8LevNon-B8", "26-Ita8LevNon-B8", "26-Ita8LevNon-B8", "26-Ita8LevNon-B8", "26-Ita8LevNon-B8", "26-Ita9ConNon-B9", "26-Ita9ConNon-B9", "26-Ita9ConNon-B9", "26-Ita9ConNon-B9", "26-Ita9ConNon-B9", "26-Ita9ConNon-B9", "26-Ita9ConNon-B9", "26-Ita9ConNon-B9", "27-Can2BacNon-B2", "27-Can2BacNon-B2", "27-Can2BacNon-B2", "27-Can2BacNon-B2", "27-Can2BacNon-B2", "27-Can2BacNon-B2", "27-Can2BacNon-B2", "27-Can2BacNon-B2", "27-Can3BacSte-B3", "27-Can3BacSte-B3", "27-Can3BacSte-B3", "27-Can3BacSte-B3", "27-Can3BacSte-B3", "27-Can3BacSte-B3", "27-Can3BacSte-B3", "27-Can3BacSte-B3", "27-Can4ConNon-B4", "27-Can4ConNon-B4", "27-Can4ConNon-B4", "27-Can4ConNon-B4", "27-Can4ConNon-B4", "27-Can4ConNon-B4", "27-Can4ConNon-B4", "27-Can4ConNon-B4", "27-Can6LevNon-B6", "27-Can6LevNon-B6", "27-Can6LevNon-B6", "27-Can6LevNon-B6", "27-Can6LevNon-B6", "27-Can6LevNon-B6", "27-Can6LevNon-B6", "27-Can6LevNon-B6", "27-Can8LevNon-B8", "27-Can8LevNon-B8", "27-Can8LevNon-B8", "27-Can8LevNon-B8", "27-Can8LevNon-B8", "27-Can8LevNon-B8", "27-Can8LevNon-B8", "27-Can8LevNon-B8", "27-Can9ConNon-B9", "27-Can9ConNon-B9", "27-Can9ConNon-B9", "27-Can9ConNon-B9", "27-Can9ConNon-B9", "27-Can9ConNon-B9", "27-Can9ConNon-B9", "27-Can9ConNon-B9", "27-Gre10BacSer-B10", "27-Gre10BacSer-B10", "27-Gre10BacSer-B10", "27-Gre10BacSer-B10", "27-Gre10BacSer-B10", "27-Gre10BacSer-B10", "27-Gre10BacSer-B10", "27-Gre10BacSer-B10", "27-Gre5ConSer-B5", "27-Gre5ConSer-B5", "27-Gre5ConSer-B5", "27-Gre5ConSer-B5", "27-Gre5ConSer-B5", "27-Gre5ConSer-B5", "27-Gre5ConSer-B5", "27-Gre5ConSer-B5", "27-Gre7LevSer-B7", "27-Gre7LevSer-B7", "27-Gre7LevSer-B7", "27-Gre7LevSer-B7", "27-Gre7LevSer-B7", "27-Gre7LevSer-B7", "27-Gre7LevSer-B7", "27-Gre7LevSer-B7", "27-Ita1BacNon-B1", "27-Ita1BacNon-B1", "27-Ita1BacNon-B1", "27-Ita1BacNon-B1", "27-Ita1BacNon-B1", "27-Ita1BacNon-B1", "27-Ita1BacNon-B1", "27-Ita1BacNon-B1", "3-Can2ConNon-B2", "3-Can2ConNon-B2", "3-Can2ConNon-B2", "3-Can2ConNon-B2", "3-Can2ConNon-B2", "3-Can2ConNon-B2", "3-Can2ConNon-B2", "3-Can2ConNon-B2", "3-Can3LevSte-B3", "3-Can3LevSte-B3", "3-Can3LevSte-B3", "3-Can3LevSte-B3", "3-Can3LevSte-B3", "3-Can3LevSte-B3", "3-Can3LevSte-B3", "3-Can3LevSte-B3", "3-Can6ConNon-B6", "3-Can6ConNon-B6", "3-Can6ConNon-B6", "3-Can6ConNon-B6", "3-Can6ConNon-B6", "3-Can6ConNon-B6", "3-Can6ConNon-B6", "3-Can6ConNon-B6", "3-Can9ConSer-B9", "3-Can9ConSer-B9", "3-Can9ConSer-B9", "3-Can9ConSer-B9", "3-Can9ConSer-B9", "3-Can9ConSer-B9", "3-Can9ConSer-B9", "3-Can9ConSer-B9", "3-Gre10LevNon-B10", "3-Gre10LevNon-B10", "3-Gre10LevNon-B10", "3-Gre10LevNon-B10", "3-Gre10LevNon-B10", "3-Gre10LevNon-B10", "3-Gre10LevNon-B10", "3-Gre10LevNon-B10", "3-Gre1LevSer-B1", "3-Gre1LevSer-B1", "3-Gre1LevSer-B1", "3-Gre1LevSer-B1", "3-Gre1LevSer-B1", "3-Gre1LevSer-B1", "3-Gre1LevSer-B1", "3-Gre1LevSer-B1", "3-Gre4ConSer-B4", "3-Gre4ConSer-B4", "3-Gre4ConSer-B4", "3-Gre4ConSer-B4", "3-Gre4ConSer-B4", "3-Gre4ConSer-B4", "3-Gre4ConSer-B4", "3-Gre4ConSer-B4", "3-Gre7BacNon-B7", "3-Gre7BacNon-B7", "3-Gre7BacNon-B7", "3-Gre7BacNon-B7", "3-Gre7BacNon-B7", "3-Gre7BacNon-B7", "3-Gre7BacNon-B7", "3-Gre7BacNon-B7", "3-Gre8BacSte-B8", "3-Gre8BacSte-B8", "3-Gre8BacSte-B8", "3-Gre8BacSte-B8", "3-Gre8BacSte-B8", "3-Gre8BacSte-B8", "3-Gre8BacSte-B8", "3-Gre8BacSte-B8", "3-Ita5LevSer-B5", "3-Ita5LevSer-B5", "3-Ita5LevSer-B5", "3-Ita5LevSer-B5", "3-Ita5LevSer-B5", "3-Ita5LevSer-B5", "3-Ita5LevSer-B5", "3-Ita5LevSer-B5", "4-Can10LevSer-B10", "4-Can10LevSer-B10", "4-Can10LevSer-B10", "4-Can10LevSer-B10", "4-Can10LevSer-B10", "4-Can10LevSer-B10", "4-Can10LevSer-B10", "4-Can10LevSer-B10", "4-Can1ConSer-B1", "4-Can1ConSer-B1", "4-Can1ConSer-B1", "4-Can1ConSer-B1", "4-Can1ConSer-B1", "4-Can1ConSer-B1", "4-Can1ConSer-B1", "4-Can1ConSer-B1", "4-Can3LevNon-B3", "4-Can3LevNon-B3", "4-Can3LevNon-B3", "4-Can3LevNon-B3", "4-Can3LevNon-B3", "4-Can3LevNon-B3", "4-Can3LevNon-B3", "4-Can3LevNon-B3", "4-Can8ConSer-B8", "4-Can8ConSer-B8", "4-Can8ConSer-B8", "4-Can8ConSer-B8", "4-Can8ConSer-B8", "4-Can8ConSer-B8", "4-Can8ConSer-B8", "4-Can8ConSer-B8", "4-Gre4BacNon-B4", "4-Gre4BacNon-B4", "4-Gre4BacNon-B4", "4-Gre4BacNon-B4", "4-Gre4BacNon-B4", "4-Gre4BacNon-B4", "4-Gre4BacNon-B4", "4-Gre4BacNon-B4", "4-Gre7LevNon-B7", "4-Gre7LevNon-B7", "4-Gre7LevNon-B7", "4-Gre7LevNon-B7", "4-Gre7LevNon-B7", "4-Gre7LevNon-B7", "4-Gre7LevNon-B7", "4-Gre7LevNon-B7", "4-Gre9LevSer-B9", "4-Gre9LevSer-B9", "4-Gre9LevSer-B9", "4-Gre9LevSer-B9", "4-Gre9LevSer-B9", "4-Gre9LevSer-B9", "4-Gre9LevSer-B9", "4-Gre9LevSer-B9", "4-Ita2LevNon-B2", "4-Ita2LevNon-B2", "4-Ita2LevNon-B2", "4-Ita2LevNon-B2", "4-Ita2LevNon-B2", "4-Ita2LevNon-B2", "4-Ita2LevNon-B2", "4-Ita2LevNon-B2", "4-Ita5BacSer-B5", "4-Ita5BacSer-B5", "4-Ita5BacSer-B5", "4-Ita5BacSer-B5", "4-Ita5BacSer-B5", "4-Ita5BacSer-B5", "4-Ita5BacSer-B5", "4-Ita5BacSer-B5", "4-Ita6BacSer-B6", "4-Ita6BacSer-B6", "4-Ita6BacSer-B6", "4-Ita6BacSer-B6", "4-Ita6BacSer-B6", "4-Ita6BacSer-B6", "4-Ita6BacSer-B6", "4-Ita6BacSer-B6", "5-Can2LevNon-B2", "5-Can2LevNon-B2", "5-Can2LevNon-B2", "5-Can2LevNon-B2", "5-Can2LevNon-B2", "5-Can2LevNon-B2", "5-Can2LevNon-B2", "5-Can2LevNon-B2", "5-Can4BacNon-B4", "5-Can4BacNon-B4", "5-Can4BacNon-B4", "5-Can4BacNon-B4", "5-Can4BacNon-B4", "5-Can4BacNon-B4", "5-Can4BacNon-B4", "5-Can4BacNon-B4", "5-Can9LevSer-B9", "5-Can9LevSer-B9", "5-Can9LevSer-B9", "5-Can9LevSer-B9", "5-Can9LevSer-B9", "5-Can9LevSer-B9", "5-Can9LevSer-B9", "5-Can9LevSer-B9", "5-Gre10LevSer-B10", "5-Gre10LevSer-B10", "5-Gre10LevSer-B10", "5-Gre10LevSer-B10", "5-Gre10LevSer-B10", "5-Gre10LevSer-B10", "5-Gre10LevSer-B10", "5-Gre10LevSer-B10", "5-Gre5BacSer-B5", "5-Gre5BacSer-B5", "5-Gre5BacSer-B5", "5-Gre5BacSer-B5", "5-Gre5BacSer-B5", "5-Gre5BacSer-B5", "5-Gre5BacSer-B5", "5-Gre5BacSer-B5", "5-Gre6BacSer-B6", "5-Gre6BacSer-B6", "5-Gre6BacSer-B6", "5-Gre6BacSer-B6", "5-Gre6BacSer-B6", "5-Gre6BacSer-B6", "5-Gre6BacSer-B6", "5-Gre6BacSer-B6", "5-Ita1ConSer-B1", "5-Ita1ConSer-B1", "5-Ita1ConSer-B1", "5-Ita1ConSer-B1", "5-Ita1ConSer-B1", "5-Ita1ConSer-B1", "5-Ita1ConSer-B1", "5-Ita1ConSer-B1", "5-Ita3LevNon-B3", "5-Ita3LevNon-B3", "5-Ita3LevNon-B3", "5-Ita3LevNon-B3", "5-Ita3LevNon-B3", "5-Ita3LevNon-B3", "5-Ita3LevNon-B3", "5-Ita3LevNon-B3", "5-Ita7LevNon-B7", "5-Ita7LevNon-B7", "5-Ita7LevNon-B7", "5-Ita7LevNon-B7", "5-Ita7LevNon-B7", "5-Ita7LevNon-B7", "5-Ita7LevNon-B7", "5-Ita7LevNon-B7", "5-Ita8ConSer-B8", "5-Ita8ConSer-B8", "5-Ita8ConSer-B8", "5-Ita8ConSer-B8", "5-Ita8ConSer-B8", "5-Ita8ConSer-B8", "5-Ita8ConSer-B8", "5-Ita8ConSer-B8", "6-Can5BacSer-B5", "6-Can5BacSer-B5", "6-Can5BacSer-B5", "6-Can5BacSer-B5", "6-Can5BacSer-B5", "6-Can5BacSer-B5", "6-Can5BacSer-B5", "6-Can5BacSer-B5", "6-Can6BacSer-B6", "6-Can6BacSer-B6", "6-Can6BacSer-B6", "6-Can6BacSer-B6", "6-Can6BacSer-B6", "6-Can6BacSer-B6", "6-Can6BacSer-B6", "6-Can6BacSer-B6", "6-Can7LevNon-B7", "6-Can7LevNon-B7", "6-Can7LevNon-B7", "6-Can7LevNon-B7", "6-Can7LevNon-B7", "6-Can7LevNon-B7", "6-Can7LevNon-B7", "6-Can7LevNon-B7", "6-Gre1ConSer-B1", "6-Gre1ConSer-B1", "6-Gre1ConSer-B1", "6-Gre1ConSer-B1", "6-Gre1ConSer-B1", "6-Gre1ConSer-B1", "6-Gre1ConSer-B1", "6-Gre1ConSer-B1", "6-Gre2LevNon-B2", "6-Gre2LevNon-B2", "6-Gre2LevNon-B2", "6-Gre2LevNon-B2", "6-Gre2LevNon-B2", "6-Gre2LevNon-B2", "6-Gre2LevNon-B2", "6-Gre2LevNon-B2", "6-Gre3LevNon-B3", "6-Gre3LevNon-B3", "6-Gre3LevNon-B3", "6-Gre3LevNon-B3", "6-Gre3LevNon-B3", "6-Gre3LevNon-B3", "6-Gre3LevNon-B3", "6-Gre3LevNon-B3", "6-Gre8ConSer-B8", "6-Gre8ConSer-B8", "6-Gre8ConSer-B8", "6-Gre8ConSer-B8", "6-Gre8ConSer-B8", "6-Gre8ConSer-B8", "6-Gre8ConSer-B8", "6-Gre8ConSer-B8", "6-Ita10LevSer-B10", "6-Ita10LevSer-B10", "6-Ita10LevSer-B10", "6-Ita10LevSer-B10", "6-Ita10LevSer-B10", "6-Ita10LevSer-B10", "6-Ita10LevSer-B10", "6-Ita10LevSer-B10", "6-Ita4BacNon-B4", "6-Ita4BacNon-B4", "6-Ita4BacNon-B4", "6-Ita4BacNon-B4", "6-Ita4BacNon-B4", "6-Ita4BacNon-B4", "6-Ita4BacNon-B4", "6-Ita4BacNon-B4", "6-Ita9LevSer-B9", "6-Ita9LevSer-B9", "6-Ita9LevSer-B9", "6-Ita9LevSer-B9", "6-Ita9LevSer-B9", "6-Ita9LevSer-B9", "6-Ita9LevSer-B9", "6-Ita9LevSer-B9", "7-Can10ConSte-B10", "7-Can10ConSte-B10", "7-Can10ConSte-B10", "7-Can10ConSte-B10", "7-Can10ConSte-B10", "7-Can10ConSte-B10", "7-Can10ConSte-B10", "7-Can10ConSte-B10", "7-Can2BacSte-B2", "7-Can2BacSte-B2", "7-Can2BacSte-B2", "7-Can2BacSte-B2", "7-Can2BacSte-B2", "7-Can2BacSte-B2", "7-Can2BacSte-B2", "7-Can2BacSte-B2", "7-Can6ConSte-B6", "7-Can6ConSte-B6", "7-Can6ConSte-B6", "7-Can6ConSte-B6", "7-Can6ConSte-B6", "7-Can6ConSte-B6", "7-Can6ConSte-B6", "7-Can6ConSte-B6", "7-Can8ConNon-B8", "7-Can8ConNon-B8", "7-Can8ConNon-B8", "7-Can8ConNon-B8", "7-Can8ConNon-B8", "7-Can8ConNon-B8", "7-Can8ConNon-B8", "7-Can8ConNon-B8", "7-Gre1LevNon-B1", "7-Gre1LevNon-B1", "7-Gre1LevNon-B1", "7-Gre1LevNon-B1", "7-Gre1LevNon-B1", "7-Gre1LevNon-B1", "7-Gre1LevNon-B1", "7-Gre1LevNon-B1", "7-Ita3ConSer-B3", "7-Ita3ConSer-B3", "7-Ita3ConSer-B3", "7-Ita3ConSer-B3", "7-Ita3ConSer-B3", "7-Ita3ConSer-B3", "7-Ita3ConSer-B3", "7-Ita3ConSer-B3", "7-Ita4BacSte-B4", "7-Ita4BacSte-B4", "7-Ita4BacSte-B4", "7-Ita4BacSte-B4", "7-Ita4BacSte-B4", "7-Ita4BacSte-B4", "7-Ita4BacSte-B4", "7-Ita4BacSte-B4", "7-Ita5ConNon-B5", "7-Ita5ConNon-B5", "7-Ita5ConNon-B5", "7-Ita5ConNon-B5", "7-Ita5ConNon-B5", "7-Ita5ConNon-B5", "7-Ita5ConNon-B5", "7-Ita5ConNon-B5", "7-Ita7BacSer-B7", "7-Ita7BacSer-B7", "7-Ita7BacSer-B7", "7-Ita7BacSer-B7", "7-Ita7BacSer-B7", "7-Ita7BacSer-B7", "7-Ita7BacSer-B7", "7-Ita7BacSer-B7", "7-Ita9BacSte-B9", "7-Ita9BacSte-B9", "7-Ita9BacSte-B9", "7-Ita9BacSte-B9", "7-Ita9BacSte-B9", "7-Ita9BacSte-B9", "7-Ita9BacSte-B9", "7-Ita9BacSte-B9", "8-Can3ConSer-B3", "8-Can3ConSer-B3", "8-Can3ConSer-B3", "8-Can3ConSer-B3", "8-Can3ConSer-B3", "8-Can3ConSer-B3", "8-Can3ConSer-B3", "8-Can3ConSer-B3", "8-Can4BacSte-B4", "8-Can4BacSte-B4", "8-Can4BacSte-B4", "8-Can4BacSte-B4", "8-Can4BacSte-B4", "8-Can4BacSte-B4", "8-Can4BacSte-B4", "8-Can4BacSte-B4", "8-Can5ConNon-B5", "8-Can5ConNon-B5", "8-Can5ConNon-B5", "8-Can5ConNon-B5", "8-Can5ConNon-B5", "8-Can5ConNon-B5", "8-Can5ConNon-B5", "8-Can5ConNon-B5", "8-Can7BacSer-B7", "8-Can7BacSer-B7", "8-Can7BacSer-B7", "8-Can7BacSer-B7", "8-Can7BacSer-B7", "8-Can7BacSer-B7", "8-Can7BacSer-B7", "8-Can7BacSer-B7", "8-Gre2BacSte-B2", "8-Gre2BacSte-B2", "8-Gre2BacSte-B2", "8-Gre2BacSte-B2", "8-Gre2BacSte-B2", "8-Gre2BacSte-B2", "8-Gre2BacSte-B2", "8-Gre2BacSte-B2", "8-Gre9BacSte-B9", "8-Gre9BacSte-B9", "8-Gre9BacSte-B9", "8-Gre9BacSte-B9", "8-Gre9BacSte-B9", "8-Gre9BacSte-B9", "8-Gre9BacSte-B9", "8-Gre9BacSte-B9", "8-Ita10ConSte-B10", "8-Ita10ConSte-B10", "8-Ita10ConSte-B10", "8-Ita10ConSte-B10", "8-Ita10ConSte-B10", "8-Ita10ConSte-B10", "8-Ita10ConSte-B10", "8-Ita10ConSte-B10", "8-Ita1LevNon-B1", "8-Ita1LevNon-B1", "8-Ita1LevNon-B1", "8-Ita1LevNon-B1", "8-Ita1LevNon-B1", "8-Ita1LevNon-B1", "8-Ita1LevNon-B1", "8-Ita1LevNon-B1", "8-Ita6ConSte-B6", "8-Ita6ConSte-B6", "8-Ita6ConSte-B6", "8-Ita6ConSte-B6", "8-Ita6ConSte-B6", "8-Ita6ConSte-B6", "8-Ita6ConSte-B6", "8-Ita6ConSte-B6", "8-Ita8ConNon-B8", "8-Ita8ConNon-B8", "8-Ita8ConNon-B8", "8-Ita8ConNon-B8", "8-Ita8ConNon-B8", "8-Ita8ConNon-B8", "8-Ita8ConNon-B8", "8-Ita8ConNon-B8", "9-Can1LevNon-B1", "9-Can1LevNon-B1", "9-Can1LevNon-B1", "9-Can1LevNon-B1", "9-Can1LevNon-B1", "9-Can1LevNon-B1", "9-Can1LevNon-B1", "9-Can1LevNon-B1", "9-Can9BacSte-B9", "9-Can9BacSte-B9", "9-Can9BacSte-B9", "9-Can9BacSte-B9", "9-Can9BacSte-B9", "9-Can9BacSte-B9", "9-Can9BacSte-B9", "9-Can9BacSte-B9", "9-Gre10ConSte-B10", "9-Gre10ConSte-B10", "9-Gre10ConSte-B10", "9-Gre10ConSte-B10", "9-Gre10ConSte-B10", "9-Gre10ConSte-B10", "9-Gre10ConSte-B10", "9-Gre10ConSte-B10", "9-Gre3ConSer-B3", "9-Gre3ConSer-B3", "9-Gre3ConSer-B3", "9-Gre3ConSer-B3", "9-Gre3ConSer-B3", "9-Gre3ConSer-B3", "9-Gre3ConSer-B3", "9-Gre3ConSer-B3", "9-Gre4BacSte-B4", "9-Gre4BacSte-B4", "9-Gre4BacSte-B4", "9-Gre4BacSte-B4", "9-Gre4BacSte-B4", "9-Gre4BacSte-B4", "9-Gre4BacSte-B4", "9-Gre4BacSte-B4", "9-Gre5ConNon-B5", "9-Gre5ConNon-B5", "9-Gre5ConNon-B5", "9-Gre5ConNon-B5", "9-Gre5ConNon-B5", "9-Gre5ConNon-B5", "9-Gre5ConNon-B5", "9-Gre5ConNon-B5", "9-Gre6ConSte-B6", "9-Gre6ConSte-B6", "9-Gre6ConSte-B6", "9-Gre6ConSte-B6", "9-Gre6ConSte-B6", "9-Gre6ConSte-B6", "9-Gre6ConSte-B6", "9-Gre6ConSte-B6", "9-Gre7BacSer-B7", "9-Gre7BacSer-B7", "9-Gre7BacSer-B7", "9-Gre7BacSer-B7", "9-Gre7BacSer-B7", "9-Gre7BacSer-B7", "9-Gre7BacSer-B7", "9-Gre7BacSer-B7", "9-Gre8ConNon-B8", "9-Gre8ConNon-B8", "9-Gre8ConNon-B8", "9-Gre8ConNon-B8", "9-Gre8ConNon-B8", "9-Gre8ConNon-B8", "9-Gre8ConNon-B8", "9-Gre8ConNon-B8", "9-Ita2BacSte-B2", "9-Ita2BacSte-B2", "9-Ita2BacSte-B2", "9-Ita2BacSte-B2", "9-Ita2BacSte-B2", "9-Ita2BacSte-B2", "9-Ita2BacSte-B2", "9-Ita2BacSte-B2"})), New Column("Bloc", Character, "Nominal", Set Values({"B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B1", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B9", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B10", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B3", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B4", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B5", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B6", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B7", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B8", "B2", "B2", "B2", "B2", "B2", "B2", "B2", "B2"})), New Column("Trt", Character, "Nominal", Set Values({"Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Lev", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Con", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac", "Bac"})), New Column("Wound", Character, "Nominal", Set Values({"Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Ser", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Non", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste", "Ste"})), New Column("Strain", Character, "Nominal", Set Values({"Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Can", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Gre", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita", "Ita"})), New Column("Day", Numeric, "Continuous", Format("Best", 12), Set Values([11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18
	, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4
	, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9
	, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18
	, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4
	, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9
	, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18
	, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4
	, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9
	, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18
	, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4
	, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9
	, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18
	, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4
	, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9
	, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18
	, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4
	, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9
	, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18
	, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4
	, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9
	, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18
	, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4
	, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9
	, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18
	, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4
	, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9
	, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9, 11, 14
	, 16, 18, 2, 4, 7, 9, 11, 14, 16, 18, 2, 4, 7, 9])), New Column("Initial_Mass", Numeric, "Continuous", Format("Best", 12), Set Values([4572, 4572, 4572, 4572, 4572, 4572, 4572, 4572, 5802, 5802, 5802, 5802, 5802, 5802, 5802, 5802, 4374, 4374, 4374, 4374, 4374, 4374, 4374, 4374, 5100, 5100, 5100, 5100, 5100, 5100, 5100, 5100, 4955, 4955
	, 4955, 4955, 4955, 4955, 4955, 4955, 5893, 5893, 5893, 5893, 5893, 5893, 5893, 5893, 7393, 7393, 7393, 7393, 7393, 7393, 7393, 7393, 5393, 5393, 5393, 5393, 5393, 5393, 5393, 5393, 4998, 4998, 4998, 4998
	, 4998, 4998, 4998, 4998, 4751, 4751, 4751, 4751, 4751, 4751, 4751, 4751, 4009, 4009, 4009, 4009, 4009, 4009, 4009, 4009, 5653, 5653, 5653, 5653, 5653, 5653, 5653, 5653, 4267, 4267, 4267, 4267, 4267, 4267
	, 4267, 4267, 5136, 5136, 5136, 5136, 5136, 5136, 5136, 5136, 6582, 6582, 6582, 6582, 6582, 6582, 6582, 6582, 6412, 6412, 6412, 6412, 6412, 6412, 6412, 6412, 4069, 4069, 4069, 4069, 4069, 4069, 4069, 4069
	, 6575, 6575, 6575, 6575, 6575, 6575, 6575, 6575, 5161, 5161, 5161, 5161, 5161, 5161, 5161, 5161, 5245, 5245, 5245, 5245, 5245, 5245, 5245, 5245, 5956, 5956, 5956, 5956, 5956, 5956, 5956, 5956, 4407, 4407
	, 4407, 4407, 4407, 4407, 4407, 4407, 5970, 5970, 5970, 5970, 5970, 5970, 5970, 5970, 4454, 4454, 4454, 4454, 4454, 4454, 4454, 4454, 4921, 4921, 4921, 4921, 4921, 4921, 4921, 4921, 5374, 5374, 5374, 5374
	, 5374, 5374, 5374, 5374, 4595, 4595, 4595, 4595, 4595, 4595, 4595, 4595, 6032, 6032, 6032, 6032, 6032, 6032, 6032, 6032, 4783, 4783, 4783, 4783, 4783, 4783, 4783, 4783, 4644, 4644, 4644, 4644, 4644, 4644
	, 4644, 4644, 5328, 5328, 5328, 5328, 5328, 5328, 5328, 5328, 4748, 4748, 4748, 4748, 4748, 4748, 4748, 4748, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4157, 4973, 4973, 4973, 4973, 4973, 4973, 4973, 4973
	, 4479, 4479, 4479, 4479, 4479, 4479, 4479, 4479, 4135, 4135, 4135, 4135, 4135, 4135, 4135, 4135, 6499, 6499, 6499, 6499, 6499, 6499, 6499, 6499, 4832, 4832, 4832, 4832, 4832, 4832, 4832, 4832, 7033, 7033
	, 7033, 7033, 7033, 7033, 7033, 7033, 5998, 5998, 5998, 5998, 5998, 5998, 5998, 5998, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 3963, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4471, 4471, 4471, 4471
	, 4471, 4471, 4471, 4471, 6100, 6100, 6100, 6100, 6100, 6100, 6100, 6100, 5975, 5975, 5975, 5975, 5975, 5975, 5975, 5975, 5535, 5535, 5535, 5535, 5535, 5535, 5535, 5535, 6107, 6107, 6107, 6107, 6107, 6107
	, 6107, 6107, 7356, 7356, 7356, 7356, 7356, 7356, 7356, 7356, 5595, 5595, 5595, 5595, 5595, 5595, 5595, 5595, 5052, 5052, 5052, 5052, 5052, 5052, 5052, 5052, 4264, 4264, 4264, 4264, 4264, 4264, 4264, 4264
	, 5183, 5183, 5183, 5183, 5183, 5183, 5183, 5183, 4677, 4677, 4677, 4677, 4677, 4677, 4677, 4677, 4980, 4980, 4980, 4980, 4980, 4980, 4980, 4980, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 6048, 5881, 5881
	, 5881, 5881, 5881, 5881, 5881, 5881, 5210, 5210, 5210, 5210, 5210, 5210, 5210, 5210, 5999, 5999, 5999, 5999, 5999, 5999, 5999, 5999, 5800, 5800, 5800, 5800, 5800, 5800, 5800, 5800, 5582, 5582, 5582, 5582
	, 5582, 5582, 5582, 5582, 4753, 4753, 4753, 4753, 4753, 4753, 4753, 4753, 4179, 4179, 4179, 4179, 4179, 4179, 4179, 4179, 5125, 5125, 5125, 5125, 5125, 5125, 5125, 5125, 4747, 4747, 4747, 4747, 4747, 4747
	, 4747, 4747, 5343, 5343, 5343, 5343, 5343, 5343, 5343, 5343, 4316, 4316, 4316, 4316, 4316, 4316, 4316, 4316, 4134, 4134, 4134, 4134, 4134, 4134, 4134, 4134, 6899, 6899, 6899, 6899, 6899, 6899, 6899, 6899
	, 5093, 5093, 5093, 5093, 5093, 5093, 5093, 5093, 4724, 4724, 4724, 4724, 4724, 4724, 4724, 4724, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 3935, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 5000, 4138, 4138
	, 4138, 4138, 4138, 4138, 4138, 4138, 4868, 4868, 4868, 4868, 4868, 4868, 4868, 4868, 5234, 5234, 5234, 5234, 5234, 5234, 5234, 5234, 5201, 5201, 5201, 5201, 5201, 5201, 5201, 5201, 4116, 4116, 4116, 4116
	, 4116, 4116, 4116, 4116, 5776, 5776, 5776, 5776, 5776, 5776, 5776, 5776, 5241, 5241, 5241, 5241, 5241, 5241, 5241, 5241, 6979, 6979, 6979, 6979, 6979, 6979, 6979, 6979, 4243, 4243, 4243, 4243, 4243, 4243
	, 4243, 4243, 5395, 5395, 5395, 5395, 5395, 5395, 5395, 5395, 4775, 4775, 4775, 4775, 4775, 4775, 4775, 4775, 5028, 5028, 5028, 5028, 5028, 5028, 5028, 5028, 5691, 5691, 5691, 5691, 5691, 5691, 5691, 5691
	, 4789, 4789, 4789, 4789, 4789, 4789, 4789, 4789, 6532, 6532, 6532, 6532, 6532, 6532, 6532, 6532, 5945, 5945, 5945, 5945, 5945, 5945, 5945, 5945, 4979, 4979, 4979, 4979, 4979, 4979, 4979, 4979, 5118, 5118
	, 5118, 5118, 5118, 5118, 5118, 5118, 5079, 5079, 5079, 5079, 5079, 5079, 5079, 5079, 4606, 4606, 4606, 4606, 4606, 4606, 4606, 4606, 4326, 4326, 4326, 4326, 4326, 4326, 4326, 4326, 5220, 5220, 5220, 5220
	, 5220, 5220, 5220, 5220, 6300, 6300, 6300, 6300, 6300, 6300, 6300, 6300, 5015, 5015, 5015, 5015, 5015, 5015, 5015, 5015, 4729, 4729, 4729, 4729, 4729, 4729, 4729, 4729, 5329, 5329, 5329, 5329, 5329, 5329
	, 5329, 5329, 4854, 4854, 4854, 4854, 4854, 4854, 4854, 4854, 4776, 4776, 4776, 4776, 4776, 4776, 4776, 4776, 4648, 4648, 4648, 4648, 4648, 4648, 4648, 4648, 6381, 6381, 6381, 6381, 6381, 6381, 6381, 6381
	, 5205, 5205, 5205, 5205, 5205, 5205, 5205, 5205, 4491, 4491, 4491, 4491, 4491, 4491, 4491, 4491, 5086, 5086, 5086, 5086, 5086, 5086, 5086, 5086, 4527, 4527, 4527, 4527, 4527, 4527, 4527, 4527, 5712, 5712
	, 5712, 5712, 5712, 5712, 5712, 5712, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 4275, 6393, 6393, 6393, 6393, 6393, 6393, 6393, 6393, 5161, 5161, 5161, 5161, 5161, 5161, 5161, 5161, 4178, 4178, 4178, 4178
	, 4178, 4178, 4178, 4178, 5340, 5340, 5340, 5340, 5340, 5340, 5340, 5340, 4783, 4783, 4783, 4783, 4783, 4783, 4783, 4783, 4373, 4373, 4373, 4373, 4373, 4373, 4373, 4373, 7210, 7210, 7210, 7210, 7210, 7210
	, 7210, 7210, 5681, 5681, 5681, 5681, 5681, 5681, 5681, 5681, 5504, 5504, 5504, 5504, 5504, 5504, 5504, 5504, 5882, 5882, 5882, 5882, 5882, 5882, 5882, 5882, 6070, 6070, 6070, 6070, 6070, 6070, 6070, 6070
	, 5029, 5029, 5029, 5029, 5029, 5029, 5029, 5029, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4740, 4991, 4991, 4991, 4991, 4991, 4991, 4991, 4991, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 4463, 5436, 5436
	, 5436, 5436, 5436, 5436, 5436, 5436, 5112, 5112, 5112, 5112, 5112, 5112, 5112, 5112, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 6253, 5539, 5539, 5539, 5539, 5539, 5539, 5539, 5539, 6085, 6085, 6085, 6085
	, 6085, 6085, 6085, 6085, 5982, 5982, 5982, 5982, 5982, 5982, 5982, 5982, 4437, 4437, 4437, 4437, 4437, 4437, 4437, 4437, 5440, 5440, 5440, 5440, 5440, 5440, 5440, 5440, 4757, 4757, 4757, 4757, 4757, 4757
	, 4757, 4757, 4841, 4841, 4841, 4841, 4841, 4841, 4841, 4841, 5615, 5615, 5615, 5615, 5615, 5615, 5615, 5615, 4332, 4332, 4332, 4332, 4332, 4332, 4332, 4332, 4258, 4258, 4258, 4258, 4258, 4258, 4258, 4258
	, 5142, 5142, 5142, 5142, 5142, 5142, 5142, 5142, 6446, 6446, 6446, 6446, 6446, 6446, 6446, 6446, 5004, 5004, 5004, 5004, 5004, 5004, 5004, 5004, 5997, 5997, 5997, 5997, 5997, 5997, 5997, 5997, 4963, 4963
	, 4963, 4963, 4963, 4963, 4963, 4963, 4603, 4603, 4603, 4603, 4603, 4603, 4603, 4603, 4435, 4435, 4435, 4435, 4435, 4435, 4435, 4435, 5949, 5949, 5949, 5949, 5949, 5949, 5949, 5949, 5659, 5659, 5659, 5659
	, 5659, 5659, 5659, 5659, 6380, 6380, 6380, 6380, 6380, 6380, 6380, 6380, 4888, 4888, 4888, 4888, 4888, 4888, 4888, 4888, 5988, 5988, 5988, 5988, 5988, 5988, 5988, 5988, 4981, 4981, 4981, 4981, 4981, 4981
	, 4981, 4981, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 6660, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 3981, 4731, 4731, 4731, 4731, 4731, 4731, 4731, 4731, 4083, 4083, 4083, 4083, 4083, 4083, 4083, 4083
	, 4711, 4711, 4711, 4711, 4711, 4711, 4711, 4711, 5478, 5478, 5478, 5478, 5478, 5478, 5478, 5478, 5641, 5641, 5641, 5641, 5641, 5641, 5641, 5641, 5071, 5071, 5071, 5071, 5071, 5071, 5071, 5071, 5641, 5641
	, 5641, 5641, 5641, 5641, 5641, 5641, 6345, 6345, 6345, 6345, 6345, 6345, 6345, 6345, 7388, 7388, 7388, 7388, 7388, 7388, 7388, 7388, 5515, 5515, 5515, 5515, 5515, 5515, 5515, 5515, 4762, 4762, 4762, 4762
	, 4762, 4762, 4762, 4762, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 4026, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 3890, 5058, 5058, 5058, 5058, 5058, 5058, 5058, 5058, 5112, 5112, 5112, 5112, 5112, 5112
	, 5112, 5112, 5221, 5221, 5221, 5221, 5221, 5221, 5221, 5221, 5436, 5436, 5436, 5436, 5436, 5436, 5436, 5436, 5729, 5729, 5729, 5729, 5729, 5729, 5729, 5729, 5106, 5106, 5106, 5106, 5106, 5106, 5106, 5106
	, 4864, 4864, 4864, 4864, 4864, 4864, 4864, 4864, 6073, 6073, 6073, 6073, 6073, 6073, 6073, 6073, 5562, 5562, 5562, 5562, 5562, 5562, 5562, 5562, 4693, 4693, 4693, 4693, 4693, 4693, 4693, 4693, 3703, 3703
	, 3703, 3703, 3703, 3703, 3703, 3703, 4981, 4981, 4981, 4981, 4981, 4981, 4981, 4981, 6006, 6006, 6006, 6006, 6006, 6006, 6006, 6006, 6412, 6412, 6412, 6412, 6412, 6412, 6412, 6412, 6496, 6496, 6496, 6496
	, 6496, 6496, 6496, 6496, 6491, 6491, 6491, 6491, 6491, 6491, 6491, 6491, 4580, 4580, 4580, 4580, 4580, 4580, 4580, 4580, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4256, 4803, 4803, 4803, 4803, 4803, 4803
	, 4803, 4803, 6545, 6545, 6545, 6545, 6545, 6545, 6545, 6545, 5945, 5945, 5945, 5945, 5945, 5945, 5945, 5945, 6039, 6039, 6039, 6039, 6039, 6039, 6039, 6039, 4433, 4433, 4433, 4433, 4433, 4433, 4433, 4433
	, 5659, 5659, 5659, 5659, 5659, 5659, 5659, 5659, 5588, 5588, 5588, 5588, 5588, 5588, 5588, 5588, 5687, 5687, 5687, 5687, 5687, 5687, 5687, 5687, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 4402, 4639, 4639
	, 4639, 4639, 4639, 4639, 4639, 4639, 4489, 4489, 4489, 4489, 4489, 4489, 4489, 4489, 5154, 5154, 5154, 5154, 5154, 5154, 5154, 5154, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 3988, 4004, 4004, 4004, 4004
	, 4004, 4004, 4004, 4004, 5357, 5357, 5357, 5357, 5357, 5357, 5357, 5357, 5719, 5719, 5719, 5719, 5719, 5719, 5719, 5719, 6188, 6188, 6188, 6188, 6188, 6188, 6188, 6188, 5149, 5149, 5149, 5149, 5149, 5149
	, 5149, 5149, 4774, 4774, 4774, 4774, 4774, 4774, 4774, 4774, 4549, 4549, 4549, 4549, 4549, 4549, 4549, 4549, 4153, 4153, 4153, 4153, 4153, 4153, 4153, 4153, 3755, 3755, 3755, 3755, 3755, 3755, 3755, 3755
	, 5793, 5793, 5793, 5793, 5793, 5793, 5793, 5793, 6762, 6762, 6762, 6762, 6762, 6762, 6762, 6762, 5185, 5185, 5185, 5185, 5185, 5185, 5185, 5185, 5852, 5852, 5852, 5852, 5852, 5852, 5852, 5852, 6191, 6191
	, 6191, 6191, 6191, 6191, 6191, 6191, 6915, 6915, 6915, 6915, 6915, 6915, 6915, 6915, 3856, 3856, 3856, 3856, 3856, 3856, 3856, 3856, 4854, 4854, 4854, 4854, 4854, 4854, 4854, 4854, 5136, 5136, 5136, 5136
	, 5136, 5136, 5136, 5136, 4310, 4310, 4310, 4310, 4310, 4310, 4310, 4310, 5792, 5792, 5792, 5792, 5792, 5792, 5792, 5792, 6811, 6811, 6811, 6811, 6811, 6811, 6811, 6811, 6684, 6684, 6684, 6684, 6684, 6684
	, 6684, 6684, 6305, 6305, 6305, 6305, 6305, 6305, 6305, 6305, 5950, 5950, 5950, 5950, 5950, 5950, 5950, 5950, 3525, 3525, 3525, 3525, 3525, 3525, 3525, 3525, 5291, 5291, 5291, 5291, 5291, 5291, 5291, 5291
	, 4300, 4300, 4300, 4300, 4300, 4300, 4300, 4300, 3079, 3079, 3079, 3079, 3079, 3079, 3079, 3079, 5483, 5483, 5483, 5483, 5483, 5483, 5483, 5483, 6137, 6137, 6137, 6137, 6137, 6137, 6137, 6137, 5185, 5185
	, 5185, 5185, 5185, 5185, 5185, 5185, 5674, 5674, 5674, 5674, 5674, 5674, 5674, 5674, 6691, 6691, 6691, 6691, 6691, 6691, 6691, 6691, 6141, 6141, 6141, 6141, 6141, 6141, 6141, 6141, 5402, 5402, 5402, 5402
	, 5402, 5402, 5402, 5402, 4873, 4873, 4873, 4873, 4873, 4873, 4873, 4873, 4739, 4739, 4739, 4739, 4739, 4739, 4739, 4739, 4656, 4656, 4656, 4656, 4656, 4656, 4656, 4656, 5352, 5352, 5352, 5352, 5352, 5352
	, 5352, 5352, 6983, 6983, 6983, 6983, 6983, 6983, 6983, 6983, 6624, 6624, 6624, 6624, 6624, 6624, 6624, 6624, 5032, 5032, 5032, 5032, 5032, 5032, 5032, 5032, 5268, 5268, 5268, 5268, 5268, 5268, 5268, 5268
	, 5822, 5822, 5822, 5822, 5822, 5822, 5822, 5822, 6812, 6812, 6812, 6812, 6812, 6812, 6812, 6812, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 3950, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4380, 4678, 4678
	, 4678, 4678, 4678, 4678, 4678, 4678, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 4718, 6451, 6451, 6451, 6451, 6451, 6451, 6451, 6451, 5788, 5788, 5788, 5788, 5788, 5788, 5788, 5788, 4612, 4612, 4612, 4612
	, 4612, 4612, 4612, 4612, 6299, 6299, 6299, 6299, 6299, 6299, 6299, 6299, 6163, 6163, 6163, 6163, 6163, 6163, 6163, 6163, 4505, 4505, 4505, 4505, 4505, 4505, 4505, 4505, 4874, 4874, 4874, 4874, 4874, 4874
	, 4874, 4874, 4958, 4958, 4958, 4958, 4958, 4958, 4958, 4958, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4608, 4706, 4706, 4706, 4706, 4706, 4706, 4706, 4706, 6455, 6455, 6455, 6455, 6455, 6455, 6455, 6455
	, 5191, 5191, 5191, 5191, 5191, 5191, 5191, 5191, 5432, 5432, 5432, 5432, 5432, 5432, 5432, 5432, 6037, 6037, 6037, 6037, 6037, 6037, 6037, 6037, 4954, 4954, 4954, 4954, 4954, 4954, 4954, 4954, 5822, 5822
	, 5822, 5822, 5822, 5822, 5822, 5822, 5596, 5596, 5596, 5596, 5596, 5596, 5596, 5596, 4447, 4447, 4447, 4447, 4447, 4447, 4447, 4447, 4065, 4065, 4065, 4065, 4065, 4065, 4065, 4065, 5771, 5771, 5771, 5771
	, 5771, 5771, 5771, 5771, 4315, 4315, 4315, 4315, 4315, 4315, 4315, 4315, 5282, 5282, 5282, 5282, 5282, 5282, 5282, 5282, 4329, 4329, 4329, 4329, 4329, 4329, 4329, 4329, 5177, 5177, 5177, 5177, 5177, 5177
	, 5177, 5177, 4790, 4790, 4790, 4790, 4790, 4790, 4790, 4790, 7378, 7378, 7378, 7378, 7378, 7378, 7378, 7378])), New Column("Mass", Numeric, "Continuous", Format("Best", 12), Set Values([5116, 6893, 6921, 6867, 4718, 4435, 5330, 5096, 9208, 9206, 6995, 6851, 6961, 7468, 7819, 9157, 10911, 12510, 12801, 12985, 5664, 7205, 7690, 8717, 9441, 12318, 12504, 12267, 6224, 7039, 8025, 8522, 9161
	, 10836, 11351, 11299, 5526, 5760, 7346, 8410, 10000, 12342, 12577, 12449, 6431, 7521, 8367, 9150, 8370, 7141, 6101, 4920, 6995, 6753, 7295, 8151, 9578, 13527, 13890, 13695, 5570, 6348, 8407, 8960, 10545
	, 12497, 12161, 11850, 7321, 8038, 7870, 8870, 9541, 9828, 10695, 9845, 5896, 6713, 7696, 8675, 8866, 10761, 10904, 10909, 4872, 5787, 7055, 7971, 9599, 11462, 11724, 11681, 6179, 7180, 7672, 8885, 6789
	, 9590, 9777, 9649, 4366, 4724, 6369, 6494, 10672, 12920, 13303, 13553, 6415, 7694, 8223, 9609, 8889, 10087, 10681, 10219, 7500, 7847, 8342, 8062, 10162, 11114, 12069, 12216, 7072, 7244, 7858, 9333, 9953
	, 10753, 11427, 11780, 5786, 6084, 6272, 8646, 8730, 9554, 9339, 7728, 7348, 7525, 7381, 8527, 9365, 12092, 12427, 12362, 6160, 7122, 7849, 8587, 9999, 12094, 11149, 11361, 5715, 6739, 7910, 9123, 8670
	, 9355, 8439, 8317, 6091, 6542, 7226, 7897, 8315, 10483, 10946, 10813, 5415, 5845, 6789, 7913, 9602, 11432, 11433, 11156, 7203, 7785, 7713, 8624, 10256, 12197, 13341, 12284, 6028, 6985, 7817, 9590, 10974
	, 12247, 12982, 13437, 5799, 6685, 7915, 9948, 9562, 12374, 12218, 10707, 5942, 6241, 7325, 8360, 5646, 6340, 6017, 6170, 4240, 4789, 4705, 4799, 10941, 13416, 13641, 13576, 6667, 6793, 8751, 9833, 4977
	, 5786, 6296, 6446, 5038, 4713, 3521, 4646, 7976, 9117, 8946, 9228, 5362, 5905, 6099, 7040, 9956, 11201, 11883, 11368, 6261, 7616, 8170, 9236, 7801, 9918, 10609, 9161, 5583, 5874, 6740, 7430, 8372, 9790
	, 10493, 10475, 4496, 5287, 6601, 7187, 7936, 8462, 8725, 8589, 5683, 6359, 6372, 6956, 10262, 11731, 11920, 12250, 5477, 6967, 7365, 9221, 10607, 12369, 12335, 12442, 5877, 7481, 7804, 8790, 12273, 15378
	, 14792, 14187, 7833, 9615, 10583, 11194, 8436, 10237, 10619, 10657, 5621, 6184, 7121, 7803, 9815, 10942, 9199, 8929, 7589, 8549, 9106, 8735, 10547, 12419, 11138, 10800, 7533, 8438, 9025, 9940, 8826, 9196
	, 9096, 9216, 5245, 6113, 6190, 7286, 8975, 11368, 11654, 11125, 5815, 6933, 7976, 8226, 7873, 9029, 9789, 9674, 4969, 5795, 6108, 6960, 11449, 12865, 11622, 11777, 7352, 8365, 9525, 10397, 10786, 12148
	, 12164, 11870, 7117, 8287, 8349, 9366, 11282, 12439, 13134, 11585, 6037, 7108, 8450, 9924, 9390, 10498, 8919, 8860, 6769, 7060, 8526, 8921, 12713, 14691, 13428, 8903, 8313, 9506, 10201, 11953, 10544, 11359
	, 11022, 10884, 6828, 8100, 7915, 9211, 8694, 10036, 9941, 8666, 5660, 6885, 6624, 7856, 8442, 10024, 10210, 9964, 4970, 5853, 6565, 7372, 10542, 12382, 12334, 12412, 5154, 6343, 8218, 8675, 10123, 12071
	, 13384, 13587, 6720, 7125, 7837, 9363, 7754, 8955, 9790, 9952, 4971, 5482, 6408, 7356, 9089, 10672, 10409, 10419, 6113, 7224, 7155, 8400, 10530, 12808, 12739, 12848, 6977, 7963, 8447, 9731, 11647, 13197
	, 13154, 12726, 6436, 8313, 8798, 11094, 9158, 11049, 10251, 10231, 6865, 7887, 7789, 8451, 12908, 14225, 13577, 13510, 7513, 8481, 9225, 11150, 9202, 10621, 10742, 9343, 6731, 7368, 7492, 8155, 9041, 11465
	, 11699, 11587, 5995, 7266, 7259, 7932, 8854, 10695, 11569, 11595, 5139, 5855, 6703, 8021, 9534, 11558, 11675, 11447, 5869, 6346, 7527, 8055, 7492, 8789, 8687, 8776, 5165, 5517, 5872, 6774, 9429, 12030
	, 11755, 11525, 5989, 7851, 7904, 8637, 8124, 9254, 9967, 8740, 5284, 6225, 6098, 7781, 6859, 9260, 9709, 9691, 3654, 4326, 5840, 5866, 11984, 13122, 12945, 12543, 8205, 8860, 9138, 9651, 9667, 12015, 12491
	, 12846, 5446, 6292, 7421, 9007, 8740, 10744, 10721, 10878, 5605, 6582, 6849, 7715, 8174, 9919, 11109, 11374, 4297, 4652, 6453, 7589, 9358, 12361, 12385, 12250, 5652, 6886, 7975, 8344, 9185, 11537, 11469
	, 11695, 5184, 6415, 7298, 8338, 8793, 11919, 12415, 12234, 5475, 5820, 7522, 8628, 8177, 8156, 8001, 7974, 6010, 6338, 6359, 7168, 9857, 13298, 13280, 13218, 6033, 7421, 8099, 8906, 10186, 11413, 11798
	, 11665, 6099, 7097, 7971, 8699, 10235, 12543, 11257, 11029, 6437, 7666, 9277, 9648, 10793, 11635, 12983, 12439, 6421, 7415, 7841, 9352, 8584, 10845, 10641, 10298, 6700, 7157, 7671, 8436, 9003, 10425, 10795
	, 10824, 5315, 5904, 6887, 7908, 9261, 12063, 12376, 11835, 6139, 7363, 8480, 8862, 9585, 10483, 11808, 11834, 5645, 6137, 6831, 9150, 8804, 12299, 12702, 12453, 6000, 7116, 8234, 8307, 8179, 7965, 7568
	, 7525, 6354, 6471, 6806, 7729, 9384, 10634, 11574, 12001, 6087, 6558, 7007, 8444, 11550, 14090, 14806, 14289, 7513, 8350, 9530, 10869, 9584, 10146, 10025, 8599, 6165, 7099, 7372, 8446, 10412, 12328, 12530
	, 12406, 5499, 6881, 8035, 8968, 9926, 13031, 13026, 13010, 5997, 7251, 8409, 9315, 8324, 9117, 9578, 9812, 5395, 5436, 5751, 7653, 6233, 6994, 7336, 5803, 4785, 4861, 5686, 6050, 9148, 9926, 10321, 10752
	, 5440, 6211, 6082, 7841, 9859, 12875, 13420, 13405, 6306, 7534, 8174, 9028, 12368, 13518, 11664, 11727, 7660, 9685, 10109, 11093, 10236, 12081, 13169, 12977, 6571, 7168, 8420, 9955, 9425, 10575, 10790
	, 10996, 5846, 6997, 7556, 8805, 9396, 11512, 12474, 11475, 5579, 5872, 8259, 9566, 9541, 12576, 13022, 12892, 5509, 6290, 7781, 8504, 10285, 11456, 11524, 8719, 6313, 6868, 6946, 9899, 8040, 9763, 9974
	, 9839, 5007, 5579, 6029, 6613, 11198, 13696, 12597, 12474, 7622, 8646, 10109, 10176, 10317, 12112, 12760, 12792, 6103, 6822, 7186, 8699, 8958, 12105, 12433, 11956, 5864, 6848, 7254, 7840, 8574, 10180, 11035
	, 11187, 5620, 6244, 7031, 8211, 9614, 10451, 10622, 9771, 5599, 6163, 6644, 8362, 9821, 10759, 11189, 11221, 7385, 8894, 9146, 9195, 8905, 10096, 10817, 10880, 5148, 6136, 6541, 7826, 11637, 13650, 13340
	, 12030, 8291, 9414, 9349, 10139, 7486, 9647, 9259, 9065, 6062, 6053, 6093, 6724, 8651, 10324, 10574, 10597, 5319, 6071, 6857, 6972, 8322, 9776, 10120, 10238, 6423, 7023, 7289, 7692, 9225, 12412, 12563
	, 12520, 6575, 7910, 8318, 8561, 8910, 9933, 10521, 11251, 5633, 6122, 6865, 8069, 8653, 9099, 9122, 7290, 6777, 6980, 7383, 7625, 11659, 14589, 14517, 14104, 7281, 8950, 9077, 10640, 11854, 11971, 12090
	, 12058, 6507, 7628, 8897, 9720, 11315, 13462, 13559, 13276, 7288, 8323, 9017, 10179, 6779, 8656, 6941, 6591, 6065, 6181, 6969, 6659, 9080, 9988, 9785, 8730, 6140, 6624, 7175, 8838, 10152, 11817, 11844
	, 11829, 5524, 6733, 7277, 7954, 9492, 12116, 12128, 11867, 5558, 6533, 8182, 8774, 6806, 7987, 8705, 8571, 5081, 5204, 5849, 6334, 9078, 10380, 10706, 10919, 6151, 6603, 6967, 8139, 10718, 11136, 11843
	, 10692, 6331, 7197, 8026, 8715, 11458, 14782, 15381, 15310, 6680, 8118, 9827, 10672, 8514, 9420, 9445, 8071, 6794, 7616, 7765, 7785, 11344, 12569, 13431, 13092, 6503, 7833, 9144, 9080, 10699, 13257, 13706
	, 12246, 7072, 8000, 8946, 9995, 6997, 8967, 10044, 10099, 4641, 4756, 5534, 6614, 9084, 11026, 11250, 11268, 6232, 7112, 7469, 8689, 9668, 10456, 11235, 11109, 5105, 5774, 7398, 7508, 8834, 9672, 9880
	, 10178, 5487, 6168, 6607, 7915, 9270, 11022, 11480, 11264, 6405, 6535, 6924, 8259, 8529, 9399, 9318, 9755, 5278, 5661, 5615, 7845, 6364, 7619, 6443, 6445, 5192, 5569, 5613, 5986, 10557, 11942, 12174, 10520
	, 6059, 6855, 7998, 8522, 12024, 13889, 13901, 13745, 7248, 8623, 9434, 10846, 8018, 8827, 9989, 10043, 5822, 6052, 6619, 7574, 10109, 11211, 11924, 10199, 6645, 7626, 8423, 9952, 7890, 8847, 7680, 7581
	, 5369, 5836, 6474, 7461, 6579, 6676, 8027, 6378, 5175, 5167, 5964, 6021, 8005, 10828, 11147, 10589, 5268, 5959, 6889, 7349, 10326, 11690, 12010, 11994, 7118, 8236, 8186, 9081, 8360, 8010, 8592, 8437, 6246
	, 6736, 6989, 7739, 12347, 13190, 12226, 10481, 7022, 8078, 9266, 10630, 7626, 9018, 9648, 9836, 5022, 4629, 6135, 6922, 6555, 7974, 7751, 7452, 6500, 6767, 5244, 5847, 8823, 10235, 10225, 10262, 6039, 6887
	, 6668, 7984, 9502, 11308, 10468, 8963, 7363, 8155, 9142, 10089, 7328, 8347, 8721, 8777, 4568, 5072, 5639, 6232, 5969, 6294, 6324, 6373, 4953, 5017, 4388, 5425, 6276, 8410, 8365, 7883, 4678, 5237, 5706
	, 5726, 6704, 7653, 7659, 7563, 5307, 5781, 6056, 6449, 8899, 10559, 10666, 10558, 6065, 6723, 7327, 8060, 6106, 7043, 7386, 7023, 5788, 6260, 6828, 6322, 5825, 7058, 6904, 6802, 5522, 5649, 6012, 6129
	, 9305, 11087, 10932, 9249, 6431, 7665, 8146, 8469, 9630, 11362, 10363, 10080, 6811, 7566, 8067, 8623, 12850, 14649, 13243, 12931, 8167, 9153, 10196, 10810, 7706, 9504, 9665, 9398, 5946, 6048, 6230, 6902
	, 11053, 11716, 11681, 11515, 6518, 7830, 7531, 9759, 5772, 7107, 7523, 7923, 4318, 4465, 4788, 5241, 7834, 9031, 9525, 9487, 4340, 5050, 5661, 6783, 7981, 10438, 10055, 10064, 5699, 6414, 7044, 7835, 9236
	, 10999, 11156, 10709, 5509, 6718, 7086, 7953, 8414, 9449, 9867, 10074, 5581, 5997, 5865, 7571, 9474, 10106, 9800, 9427, 5914, 6664, 7138, 8476, 7084, 7526, 7573, 6404, 5849, 5635, 6252, 7000, 9788, 12042
	, 12556, 12226, 6122, 7319, 8297, 8855, 9586, 10706, 10639, 10894, 5817, 7564, 8219, 8985, 10843, 14783, 14629, 14395, 6775, 8199, 9490, 9794, 10825, 12780, 10368, 10035, 6199, 6636, 8844, 9671, 9371, 11968
	, 12497, 12508, 5941, 6612, 7453, 9037, 5958, 6492, 6151, 6322, 4057, 4094, 4511, 4915, 9621, 11553, 12332, 12756, 5431, 6305, 7482, 9007, 11366, 13654, 13955, 13870, 6140, 7435, 8763, 9801, 11274, 13861
	, 12604, 12045, 7616, 8119, 10237, 10521, 10324, 10715, 11923, 12359, 7039, 8048, 8072, 10175, 8983, 8162, 8010, 6805, 7225, 7563, 6989, 8254, 5627, 5841, 5889, 5865, 4395, 5088, 4542, 4817, 3813, 4047
	, 3441, 3408, 3646, 2742, 3433, 3971, 5499, 6494, 6186, 5798, 4587, 5201, 5038, 5038, 12339, 14223, 12823, 11469, 7991, 8899, 10644, 11465, 12168, 13747, 13756, 13683, 7967, 9196, 9417, 10203, 10628, 12777
	, 12842, 12554, 7076, 8038, 8665, 9537, 10122, 12269, 12832, 12890, 6449, 7299, 7907, 9181, 11296, 13605, 13551, 13197, 7124, 8113, 8513, 10155, 10963, 12694, 12587, 11400, 6800, 7679, 8276, 10024, 11425
	, 12943, 13161, 11790, 6985, 7803, 8937, 10688, 9705, 11205, 11094, 11190, 5846, 6868, 7078, 7938, 8719, 10905, 11027, 10782, 5497, 6218, 6804, 7368, 8258, 11172, 10901, 10731, 5345, 6706, 7119, 7239, 10194
	, 12474, 12713, 12761, 6270, 7521, 7878, 9048, 9014, 11982, 11549, 11356, 5701, 6714, 7087, 7913, 8657, 10620, 10621, 10389, 4756, 6176, 6470, 7815, 9977, 10253, 11204, 11600, 6105, 6704, 6962, 9358, 9032
	, 9779, 10003, 10203, 6239, 6715, 7254, 8584, 8665, 9589, 9108, 6750, 6625, 6932, 7029, 8178, 9851, 12920, 13178, 13015, 5851, 7559, 8667, 9166, 9904, 11171, 10109, 10254, 5826, 6896, 7533, 8455, 9083, 10257
	, 10563, 10312, 5541, 6275, 6656, 8543, 7211, 10737, 10345, 10123, 4319, 5913, 6265, 6590, 6318, 7582, 8710, 8868, 4048, 4566, 5667, 6442, 12740, 13949, 14289, 12895, 7041, 8347, 9653, 10937, 9752, 10546
	, 7798, 7858, 7124, 7823, 8662, 9115, 8997, 9173, 10532, 10571, 5871, 6427, 6949, 8345, 10685, 12549, 12915, 12849, 7217, 8434, 9229, 10137, 11310, 12902, 12996, 13158, 7229, 8183, 8642, 10026, 11207, 12002
	, 12224, 12085, 7676, 8550, 8910, 10263, 6242, 6410, 6902, 7030, 4258, 4648, 5110, 5630, 6675, 7091, 6969, 6780, 4975, 5504, 5322, 6331, 9985, 11420, 11394, 11155, 6521, 7334, 8081, 8969, 6706, 7390, 7295
	, 7465, 4904, 5571, 5157, 6257, 11164, 12204, 11816, 11907, 6588, 7805, 8269, 10365, 12609, 13904, 13643, 7939, 8706, 9324, 10204, 11970, 10339, 11415, 11095, 11089, 7718, 8352, 8202, 9655, 12042, 12254
	, 12407, 12292, 7922, 9039, 9249, 10702, 9083, 8851, 8551, 8737, 6377, 7091, 7105, 7801, 3784, 4848, 4940, 5103, 3264, 3411, 3929, 3558, 11238, 12450, 12569, 12357, 7067, 8070, 8873, 9901, 8406, 10898, 11601
	, 11444, 4684, 6029, 7161, 7538, 7077, 7769, 9189, 9645, 3998, 4361, 5365, 6909, 8562, 9565, 9600, 9565, 5999, 6604, 7103, 7705, 7516, 7125, 7785, 8069, 5598, 6179, 5705, 7044, 8812, 10063, 10649, 10703
	, 5724, 6606, 6273, 7632, 6686, 7934, 7948, 7948, 6401, 6968, 5764, 6380, 11065, 10946, 11768, 10389, 7449, 7975, 9166, 10456, 10415, 12729, 12648, 11217, 7426, 7958, 8174, 9185, 9734, 8654, 8753, 8757
	, 5992, 7305, 7641, 8828, 7219, 8609, 8716, 8877, 4739, 5269, 5956, 6510, 6987, 9020, 9286, 8987, 5395, 6161, 6263, 6342, 9779, 11819, 11862, 11820, 6274, 6638, 7361, 8799, 5979, 7979, 7962, 7942, 6007
	, 6465, 6474, 5939, 13432, 13697, 11558, 10594, 7416, 8752, 10284, 11410, 10980, 11577, 10639, 10429, 7825, 8796, 9472, 10260, 9772, 11156, 10905, 11199, 6237, 7129, 7125, 8950, 8973, 9882, 9654, 9536, 6835
	, 7253, 7239, 7559, 9997, 11885, 12219, 11947, 6774, 8118, 9358, 9742, 10895, 12503, 11940, 10962, 7602, 8497, 8402, 10153, 7956, 9132, 9337, 8920, 4329, 5142, 5672, 6783, 8402, 9321, 9792, 10223, 4983
	, 5385, 5732, 6840, 7053, 9171, 8708, 8622, 5435, 6182, 6025, 6335, 9465, 12348, 12877, 12532, 6042, 7274, 7884, 8363, 12192, 14736, 14707, 13036, 7558, 8499, 9617, 10655, 8311, 9579, 10519, 10439, 5958
	, 6685, 7263, 7857, 6937, 9072, 9560, 9452, 4400, 5428, 6428, 6256, 10812, 12966, 12946, 13042, 6083, 7346, 8106, 9154, 8201, 7929, 8231, 8416, 6484, 6470, 6985, 7860, 6934, 9227, 9646, 9621, 4941, 5299
	, 5405, 6061, 8165, 8339, 8719, 8733, 5576, 6020, 6009, 7576, 8719, 9628, 9872, 10217, 6160, 7318, 6812, 8106, 9731, 12285, 13087, 13049, 4971, 6912, 7935, 8114, 7122, 8089, 8867, 9180, 5138, 5390, 5896
	, 7171, 9730, 9581, 9785, 9521, 7205, 7742, 8354, 9454, 10675, 12648, 13340, 11811, 6394, 7523, 7967, 10068, 11111, 12521, 12734, 12696, 6447, 7546, 8305, 9299, 11713, 11124, 11325, 10204, 7224, 8131, 8303
	, 10460, 9425, 11096, 10454, 10375, 6941, 8255, 8569, 8851, 11582, 14261, 14399, 14113, 6656, 8788, 9676, 10875, 10113, 12586, 12318, 10781, 6239, 7469, 8263, 8848, 9937, 11375, 11883, 12424, 5761, 6998
	, 7198, 8801, 8473, 8577, 9015, 9294, 5664, 5847, 6589, 7845, 7991, 8855, 8679, 8586, 5661, 6199, 6156, 6824, 10382, 12344, 12821, 12439, 6737, 7792, 8748, 9116, 12451, 12715, 13246, 13458, 6900, 7699, 8026
	, 11370, 7818, 10449, 11289, 11110, 5274, 6093, 7008, 7432, 8945, 10583, 11615, 11592, 6040, 6141, 7503, 8155, 10275, 12273, 12520, 12546, 6696, 7222, 8235, 9326, 10705, 11424, 11765, 10665, 7604, 8518
	, 8557, 9599])), New Column("Initial_Number", Numeric, "Continuous", Format("Best", 12), Set Values([10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9
	, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10])), New Column("Number", Numeric, "Continuous", Format("Best", 12), Set Values([9, 9, 8, 8, 10, 9, 9, 9, 10, 9, 6, 6, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 8, 7, 6, 5, 10, 9, 9, 8, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 8
	, 8, 7, 7, 9, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 7, 7, 6, 6, 10, 9, 9
	, 7, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 10, 9, 6, 6, 9, 9, 8, 8, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 9, 9, 8, 8, 10, 10, 10, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 8, 8, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 8, 9, 9, 9, 9, 9, 8, 7, 7, 10, 9, 9, 9, 10, 10, 9, 6, 10, 10
	, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 8, 8, 8, 7, 9, 9, 9, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 10, 9
	, 9, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 9, 9, 8, 8, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 7, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 8, 8, 10, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 8, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 8, 10, 9, 9, 9, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 8, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 7, 7, 10, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 7, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 8, 10, 10, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 10
	, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 9, 8, 8, 8, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 9, 9, 8
	, 8, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 6, 9, 9, 9, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 6, 5, 10, 10, 8, 8, 10, 9, 9, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9
	, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 7, 10, 10, 9, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 10, 10, 9, 9, 10, 10, 10, 9, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 8, 10, 10, 10, 10, 9, 9, 8, 8, 9, 9, 9, 9, 9, 9, 9, 8, 10, 10, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 9, 8, 10, 10, 10, 10, 9, 8, 8, 8, 10, 9, 9, 9, 7, 7, 7, 6, 10, 10, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 7, 7, 7, 7, 9, 8, 7, 7, 10, 10, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 7, 10, 10, 10, 9, 9, 8, 8, 8, 10, 10, 10, 10, 8, 8, 8, 7, 9, 9, 9, 8, 10, 10
	, 9, 9, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 8, 8, 8, 8, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 10, 10, 10, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9
	, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 8, 8, 7, 6, 10, 10, 9, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10
	, 8, 7, 7, 6, 10, 9, 9, 8, 8, 8, 8, 8, 9, 9, 8, 8, 6, 6, 5, 4, 9, 7, 7, 7, 8, 8, 8, 7, 9, 9, 9, 8, 10, 10, 9, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 9, 9, 7, 7, 10, 10, 10, 10, 10
	, 10, 10, 9, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 10, 10, 9, 9, 10, 9, 9, 9, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 6, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 10, 9, 9, 10, 10, 10, 10, 10, 10, 9, 8, 8, 10, 10, 10, 10, 7, 7, 7, 7, 9, 8, 8
	, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 7, 6, 6, 6, 8, 8, 7, 7, 9, 9, 9, 9, 10, 10, 9, 9, 7, 7, 7, 7, 10, 10, 7, 7
	, 10, 9, 9, 8, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 8, 8, 8, 10, 10, 10, 10, 9, 9, 9, 9, 9, 10, 9, 9, 9, 8, 8, 8, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 9, 10, 8, 7, 10
	, 10, 8, 7, 10, 10, 10, 10, 9, 8, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10
	, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 9, 9, 9, 10, 10, 10, 10, 8, 8, 8, 8, 10, 9, 8, 7, 9, 9, 9, 8, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 8, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10
	, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 10, 10, 10, 10, 9, 9, 8, 8, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 9, 9, 9, 8, 10, 10, 10, 9])), New Column("Mean", Numeric, "Continuous", Format("Best", 12), Set Selected, Set Values([568.444444444444, 765.888888888889, 865.125, 858.375, 471.8, 492.777777777778, 592.222222222222, 566.222222222222, 920.8, 1022.88888888889, 1165.83333333333, 1141.83333333333, 696.1, 746.8, 781.9, 915.7
	, 1091.1, 1251, 1280.1, 1298.5, 566.4, 720.5, 769, 871.7, 944.1, 1231.8, 1250.4, 1226.7, 622.4, 703.9, 802.5, 852.2, 1017.88888888889, 1204, 1418.875, 1255.44444444444, 552.6, 576, 734.6, 934.444444444444
	, 1000, 1234.2, 1257.7, 1244.9, 643.1, 752.1, 836.7, 915, 1046.25, 1020.14285714286, 1016.83333333333, 984, 699.5, 750.333333333333, 810.555555555555, 1018.875, 957.8, 1352.7, 1389, 1369.5, 557, 634.8, 840.7
	, 896, 1054.5, 1249.7, 1216.1, 1185, 732.1, 803.8, 787, 887, 954.1, 1092, 1188.33333333333, 1230.625, 589.6, 671.3, 769.6, 867.5, 886.6, 1076.1, 1090.4, 1090.9, 487.2, 578.7, 705.5, 797.1, 959.9, 1146.2
	, 1172.4, 1168.1, 617.9, 718, 767.2, 888.5, 678.9, 959, 977.7, 964.9, 436.6, 472.4, 636.9, 649.4, 1067.2, 1292, 1330.3, 1355.3, 641.5, 769.4, 822.3, 960.9, 987.666666666667, 1120.77777777778, 1186.77777777778
	, 1021.9, 750, 784.7, 834.2, 895.777777777778, 1016.2, 1111.4, 1206.9, 1221.6, 707.2, 724.4, 785.8, 933.3, 995.3, 1075.3, 1142.7, 1178, 578.6, 608.4, 627.2, 864.6, 970, 1061.55555555556, 1167.375, 1104
	, 734.8, 752.5, 738.1, 852.7, 936.5, 1209.2, 1242.7, 1236.2, 616, 712.2, 784.9, 858.7, 999.9, 1209.4, 1238.77777777778, 1262.33333333333, 571.5, 673.9, 791, 912.3, 1083.75, 1169.375, 1205.57142857143, 1188.14285714286
	, 676.777777777778, 817.75, 903.25, 987.125, 831.5, 1048.3, 1094.6, 1081.3, 541.5, 584.5, 678.9, 791.3, 960.2, 1143.2, 1143.3, 1115.6, 720.3, 778.5, 771.3, 862.4, 1025.6, 1219.7, 1334.1, 1364.88888888889
	, 602.8, 698.5, 781.7, 959, 1097.4, 1224.7, 1298.2, 1343.7, 579.9, 668.5, 791.5, 994.8, 956.2, 1237.4, 1221.8, 1189.66666666667, 594.2, 624.1, 732.5, 836, 806.571428571429, 905.714285714286, 1002.83333333333
	, 1028.33333333333, 424, 532.111111111111, 522.777777777778, 685.571428571429, 1094.1, 1341.6, 1364.1, 1357.6, 666.7, 679.3, 875.1, 983.3, 829.5, 964.333333333333, 1049.33333333333, 1074.33333333333, 503.8
	, 523.666666666667, 586.833333333333, 774.333333333333, 886.222222222222, 1013, 1118.25, 1153.5, 595.777777777778, 656.111111111111, 677.666666666667, 782.222222222222, 995.6, 1120.1, 1188.3, 1263.11111111111
	, 626.1, 761.6, 817, 923.6, 780.1, 991.8, 1060.9, 1017.88888888889, 558.3, 587.4, 674, 743, 837.2, 979, 1049.3, 1047.5, 449.6, 528.7, 660.1, 718.7, 793.6, 846.2, 969.444444444444, 954.333333333333, 568.3
	, 635.9, 637.2, 695.6, 1026.2, 1173.1, 1192, 1225, 547.7, 696.7, 736.5, 922.1, 1060.7, 1236.9, 1233.5, 1244.2, 587.7, 748.1, 780.4, 879, 1227.3, 1537.8, 1643.55555555556, 1576.33333333333, 783.3, 961.5
	, 1058.3, 1119.4, 843.6, 1023.7, 1061.9, 1184.11111111111, 562.1, 618.4, 712.1, 780.3, 1090.55555555556, 1215.77777777778, 1149.875, 1116.125, 758.9, 854.9, 910.6, 970.555555555555, 1054.7, 1241.9, 1237.55555555556
	, 1200, 753.3, 843.8, 902.5, 994, 882.6, 919.6, 909.6, 921.6, 524.5, 611.3, 619, 728.6, 897.5, 1136.8, 1165.4, 1112.5, 581.5, 693.3, 797.6, 822.6, 874.777777777778, 1003.22222222222, 1087.66666666667, 1074.88888888889
	, 552.111111111111, 643.888888888889, 678.666666666667, 773.333333333333, 1144.9, 1286.5, 1452.75, 1472.125, 735.2, 836.5, 952.5, 1039.7, 1078.6, 1349.77777777778, 1351.55555555556, 1318.88888888889, 711.7
	, 828.7, 834.9, 936.6, 1253.55555555556, 1382.11111111111, 1459.33333333333, 1448.125, 670.777777777778, 789.777777777778, 938.888888888889, 1102.66666666667, 1043.33333333333, 1312.25, 1274.14285714286
	, 1265.71428571429, 676.9, 784.444444444444, 947.333333333333, 991.222222222222, 1271.3, 1469.1, 1492, 1483.83333333333, 831.3, 950.6, 1020.1, 1195.3, 1054.4, 1262.11111111111, 1224.66666666667, 1209.33333333333
	, 682.8, 810, 791.5, 921.1, 1086.75, 1254.5, 1242.625, 1238, 628.888888888889, 765, 736, 982, 844.2, 1002.4, 1021, 996.4, 497, 585.3, 656.5, 737.2, 1054.2, 1238.2, 1233.4, 1241.2, 515.4, 634.3, 821.8, 867.5
	, 1012.3, 1207.1, 1338.4, 1358.7, 672, 712.5, 783.7, 936.3, 861.555555555555, 995, 1087.77777777778, 1105.77777777778, 497.1, 609.111111111111, 712, 817.333333333333, 1009.88888888889, 1185.77777777778
	, 1156.55555555556, 1157.66666666667, 611.3, 802.666666666667, 795, 933.333333333333, 1053, 1280.8, 1415.44444444444, 1427.55555555556, 697.7, 796.3, 844.7, 973.1, 1164.7, 1319.7, 1461.55555555556, 1414
	, 643.6, 831.3, 879.8, 1109.4, 1017.55555555556, 1227.66666666667, 1281.375, 1278.875, 686.5, 788.7, 865.444444444444, 939, 1290.8, 1422.5, 1357.7, 1351, 751.3, 848.1, 922.5, 1115, 1022.44444444444, 1327.625
	, 1342.75, 1334.71428571429, 747.888888888889, 818.666666666667, 832.444444444444, 906.111111111111, 904.1, 1146.5, 1169.9, 1158.7, 599.5, 726.6, 725.9, 793.2, 885.4, 1069.5, 1156.9, 1159.5, 513.9, 585.5
	, 670.3, 802.1, 1059.33333333333, 1284.22222222222, 1297.22222222222, 1271.88888888889, 586.9, 705.111111111111, 836.333333333333, 895, 832.444444444444, 976.555555555555, 1085.875, 1097, 516.5, 613, 652.444444444444
	, 752.666666666667, 942.9, 1336.66666666667, 1306.11111111111, 1280.55555555556, 598.9, 785.1, 790.4, 863.7, 902.666666666667, 1028.22222222222, 1107.44444444444, 1092.5, 528.4, 622.5, 609.8, 864.555555555555
	, 762.111111111111, 1028.88888888889, 1078.77777777778, 1076.77777777778, 406, 480.666666666667, 648.888888888889, 651.777777777778, 1198.4, 1312.2, 1294.5, 1254.3, 820.5, 886, 913.8, 965.1, 966.7, 1201.5
	, 1249.1, 1284.6, 544.6, 629.2, 742.1, 900.7, 874, 1074.4, 1072.1, 1087.8, 560.5, 658.2, 684.9, 771.5, 817.4, 991.9, 1110.9, 1137.4, 429.7, 465.2, 645.3, 758.9, 935.8, 1236.1, 1238.5, 1225, 565.2, 688.6
	, 797.5, 834.4, 918.5, 1153.7, 1146.9, 1169.5, 518.4, 641.5, 729.8, 833.8, 879.3, 1191.9, 1241.5, 1223.4, 547.5, 582, 752.2, 862.8, 908.555555555555, 1019.5, 1000.125, 996.75, 601, 704.222222222222, 706.555555555555
	, 796.444444444444, 985.7, 1329.8, 1328, 1321.8, 603.3, 742.1, 809.9, 890.6, 1018.6, 1141.3, 1179.8, 1166.5, 609.9, 709.7, 797.1, 869.9, 1023.5, 1254.3, 1250.77777777778, 1225.44444444444, 643.7, 766.6
	, 927.7, 964.8, 1079.3, 1163.5, 1298.3, 1243.9, 642.1, 741.5, 784.1, 935.2, 953.777777777778, 1205, 1182.33333333333, 1287.25, 670, 715.7, 767.1, 937.333333333333, 900.3, 1042.5, 1079.5, 1082.4, 531.5, 590.4
	, 688.7, 790.8, 926.1, 1206.3, 1237.6, 1183.5, 613.9, 736.3, 848, 886.2, 958.5, 1048.3, 1180.8, 1183.4, 564.5, 613.7, 683.1, 915, 880.4, 1229.9, 1270.2, 1245.3, 600, 711.6, 823.4, 830.7, 908.777777777778
	, 995.625, 1081.14285714286, 1075, 635.4, 719, 850.75, 858.777777777778, 1042.66666666667, 1181.55555555556, 1286, 1333.44444444444, 676.333333333333, 728.666666666667, 778.555555555555, 938.222222222222
	, 1155, 1409, 1480.6, 1428.9, 751.3, 835, 953, 1086.9, 1064.88888888889, 1268.25, 1253.125, 1228.42857142857, 685, 788.777777777778, 819.111111111111, 938.444444444444, 1041.2, 1232.8, 1253, 1240.6, 549.9
	, 688.1, 803.5, 896.8, 992.6, 1303.1, 1302.6, 1301, 599.7, 725.1, 840.9, 931.5, 924.888888888889, 1013, 1064.22222222222, 1090.22222222222, 539.5, 604, 639, 850.333333333333, 692.555555555555, 777.111111111111
	, 815.111111111111, 725.375, 478.5, 486.1, 631.777777777778, 672.222222222222, 1016.44444444444, 1102.88888888889, 1146.77777777778, 1194.66666666667, 544, 690.111111111111, 675.777777777778, 871.222222222222
	, 985.9, 1287.5, 1342, 1340.5, 630.6, 753.4, 817.4, 902.8, 1236.8, 1351.8, 1458, 1465.875, 766, 968.5, 1010.9, 1109.3, 1137.33333333333, 1342.33333333333, 1463.22222222222, 1441.88888888889, 657.1, 716.8
	, 842, 995.5, 942.5, 1057.5, 1198.88888888889, 1221.77777777778, 584.6, 699.7, 755.6, 880.5, 939.6, 1151.2, 1247.4, 1275, 557.9, 587.2, 825.9, 956.6, 954.1, 1257.6, 1302.2, 1289.2, 550.9, 629, 778.1, 850.4
	, 1028.5, 1145.6, 1152.4, 1089.875, 631.3, 686.8, 694.6, 989.9, 804, 976.3, 997.4, 983.9, 500.7, 557.9, 602.9, 661.3, 1119.8, 1369.6, 1399.66666666667, 1386, 762.2, 864.6, 1010.9, 1017.6, 1031.7, 1211.2
	, 1276, 1279.2, 610.3, 682.2, 718.6, 869.9, 895.8, 1210.5, 1243.3, 1328.44444444444, 586.4, 684.8, 725.4, 784, 857.4, 1018, 1226.11111111111, 1243, 562, 624.4, 703.1, 821.1, 961.4, 1045.1, 1062.2, 1085.66666666667
	, 559.9, 616.3, 664.4, 836.2, 1091.22222222222, 1344.875, 1398.625, 1402.625, 738.5, 889.4, 914.6, 1021.66666666667, 890.5, 1009.6, 1081.7, 1088, 514.8, 613.6, 654.1, 782.6, 1163.7, 1365, 1334, 1336.66666666667
	, 829.1, 941.4, 934.9, 1013.9, 831.777777777778, 1071.88888888889, 1157.375, 1133.125, 606.2, 672.555555555555, 677, 747.111111111111, 865.1, 1032.4, 1057.4, 1059.7, 531.9, 607.1, 685.7, 697.2, 832.2, 977.6
	, 1012, 1023.8, 642.3, 702.3, 728.9, 769.2, 922.5, 1241.2, 1256.3, 1252, 657.5, 791, 831.8, 856.1, 891, 993.3, 1052.1, 1125.1, 563.3, 612.2, 686.5, 806.9, 1081.625, 1137.375, 1140.25, 1215, 753, 775.555555555555
	, 820.333333333333, 953.125, 1165.9, 1458.9, 1451.7, 1410.4, 728.1, 895, 907.7, 1064, 1185.4, 1330.11111111111, 1343.33333333333, 1339.77777777778, 650.7, 762.8, 889.7, 972, 1131.5, 1346.2, 1355.9, 1327.6
	, 728.8, 832.3, 901.7, 1017.9, 847.375, 1082, 1156.83333333333, 1318.2, 606.5, 618.1, 871.125, 832.375, 908, 1109.77777777778, 1087.22222222222, 1091.25, 614, 662.4, 717.5, 883.8, 1015.2, 1181.7, 1184.4
	, 1182.9, 552.4, 673.3, 727.7, 795.4, 949.2, 1211.6, 1212.8, 1186.7, 555.8, 653.3, 818.2, 877.4, 756.222222222222, 887.444444444444, 967.222222222222, 952.333333333333, 508.1, 578.222222222222, 649.888888888889
	, 703.777777777778, 1008.66666666667, 1153.33333333333, 1189.55555555556, 1213.22222222222, 683.444444444444, 733.666666666667, 774.111111111111, 904.333333333333, 1071.8, 1113.6, 1184.3, 1336.5, 633.1
	, 719.7, 802.6, 871.5, 1145.8, 1478.2, 1538.1, 1531, 668, 811.8, 982.7, 1067.2, 946, 1177.5, 1180.625, 1153, 679.4, 761.6, 862.777777777778, 865, 1134.4, 1256.9, 1492.33333333333, 1454.66666666667, 650.3
	, 783.3, 914.4, 908, 1069.9, 1325.7, 1370.6, 1360.66666666667, 707.2, 800, 894.6, 999.5, 777.444444444444, 996.333333333333, 1116, 1122.11111111111, 464.1, 528.444444444444, 614.888888888889, 734.888888888889
	, 908.4, 1102.6, 1125, 1126.8, 623.2, 711.2, 746.9, 868.9, 966.8, 1045.6, 1123.5, 1234.33333333333, 510.5, 577.4, 739.8, 750.8, 883.4, 967.2, 988, 1017.8, 548.7, 616.8, 660.7, 791.5, 1030, 1224.66666666667
	, 1275.55555555556, 1251.55555555556, 640.5, 726.111111111111, 769.333333333333, 917.666666666667, 852.9, 939.9, 931.8, 975.5, 527.8, 566.1, 561.5, 784.5, 707.111111111111, 846.555555555555, 805.375, 805.625
	, 519.2, 556.9, 623.666666666667, 665.111111111111, 1055.7, 1194.2, 1217.4, 1168.88888888889, 605.9, 685.5, 799.8, 852.2, 1202.4, 1388.9, 1390.1, 1374.5, 724.8, 862.3, 943.4, 1084.6, 801.8, 980.777777777778
	, 1109.88888888889, 1115.88888888889, 582.2, 605.2, 661.9, 757.4, 1123.22222222222, 1245.66666666667, 1324.88888888889, 1274.875, 664.5, 762.6, 842.3, 995.2, 876.666666666667, 983, 960, 947.625, 596.555555555555
	, 648.444444444444, 719.333333333333, 829, 731, 741.777777777778, 891.888888888889, 797.25, 517.5, 516.7, 662.666666666667, 669, 800.5, 1082.8, 1114.7, 1176.55555555556, 526.8, 595.9, 688.9, 734.9, 1032.6
	, 1169, 1201, 1199.4, 711.8, 823.6, 818.6, 908.1, 836, 890, 954.666666666667, 937.444444444444, 624.6, 673.6, 698.9, 773.9, 1234.7, 1319, 1358.44444444444, 1310.125, 702.2, 807.8, 926.6, 1063, 847.333333333333
	, 1127.25, 1206, 1229.5, 502.2, 514.333333333333, 681.666666666667, 769.111111111111, 936.428571428571, 1139.14285714286, 1107.28571428571, 1242, 650, 676.7, 749.142857142857, 835.285714285714, 882.3, 1023.5
	, 1022.5, 1026.2, 603.9, 688.7, 666.8, 798.4, 1055.77777777778, 1256.44444444444, 1308.5, 1280.42857142857, 736.3, 815.5, 914.2, 1008.9, 732.8, 834.7, 872.1, 877.7, 456.8, 507.2, 563.9, 623.2, 852.714285714286
	, 899.142857142857, 903.428571428571, 910.428571428571, 550.333333333333, 627.125, 626.857142857143, 775, 627.6, 841, 929.444444444444, 875.888888888889, 467.8, 523.7, 570.6, 572.6, 744.888888888889, 850.333333333333
	, 851, 840.333333333333, 530.7, 578.1, 605.6, 716.555555555555, 889.9, 1055.9, 1066.6, 1055.8, 606.5, 672.3, 732.7, 806, 763.25, 880.375, 923.25, 1003.28571428571, 578.8, 626, 682.8, 702.444444444444, 647.222222222222
	, 882.25, 863, 850.25, 552.2, 564.9, 601.2, 612.9, 1163.125, 1385.875, 1366.5, 1321.28571428571, 714.555555555555, 851.666666666667, 905.111111111111, 1058.625, 963, 1136.2, 1151.44444444444, 1120, 681.1
	, 756.6, 806.7, 862.3, 1285, 1464.9, 1471.44444444444, 1436.77777777778, 816.7, 915.3, 1019.6, 1081, 963.25, 1188, 1208.125, 1174.75, 594.6, 672, 692.222222222222, 766.888888888889, 1105.3, 1171.6, 1168.1
	, 1151.5, 651.8, 783, 753.1, 975.9, 721.5, 888.375, 940.375, 990.375, 431.8, 446.5, 478.8, 655.125, 783.4, 903.1, 952.5, 948.7, 434, 505, 566.1, 678.3, 798.1, 1043.8, 1005.5, 1006.4, 569.9, 641.4, 704.4
	, 783.5, 1026.22222222222, 1222.11111111111, 1239.55555555556, 1189.88888888889, 612.111111111111, 746.444444444444, 787.333333333333, 883.666666666667, 934.888888888889, 1049.88888888889, 1096.33333333333
	, 1119.33333333333, 620.111111111111, 666.333333333333, 651.666666666667, 841.222222222222, 947.4, 1010.6, 980, 1047.44444444444, 591.4, 666.4, 713.8, 847.6, 885.5, 940.75, 1081.85714285714, 1067.33333333333
	, 584.9, 563.5, 694.666666666667, 700, 978.8, 1204.2, 1255.6, 1358.44444444444, 612.2, 731.9, 829.7, 885.5, 958.6, 1189.55555555556, 1182.11111111111, 1210.44444444444, 581.7, 756.4, 821.9, 898.5, 1084.3
	, 1478.3, 1462.9, 1439.5, 677.5, 819.9, 949, 979.4, 1082.5, 1278, 1296, 1254.375, 619.9, 663.6, 884.4, 967.1, 937.1, 1196.8, 1249.7, 1250.8, 594.1, 661.2, 745.3, 903.7, 662, 721.333333333333, 768.875, 790.25
	, 405.7, 454.888888888889, 501.222222222222, 546.111111111111, 962.1, 1155.3, 1233.2, 1275.6, 543.1, 630.5, 748.2, 900.7, 1136.6, 1365.4, 1395.5, 1387, 614, 743.5, 876.3, 980.1, 1127.4, 1386.1, 1400.44444444444
	, 1338.33333333333, 761.6, 811.9, 1023.7, 1052.1, 1147.11111111111, 1190.55555555556, 1324.77777777778, 1373.22222222222, 703.9, 804.8, 807.2, 1017.5, 1122.875, 1166, 1144.28571428571, 1134.16666666667
	, 722.5, 840.333333333333, 776.555555555555, 1031.75, 703.375, 730.125, 736.125, 733.125, 488.333333333333, 565.333333333333, 567.75, 602.125, 635.5, 674.5, 688.2, 852, 405.111111111111, 391.714285714286
	, 490.428571428571, 567.285714285714, 687.375, 811.75, 773.25, 828.285714285714, 509.666666666667, 577.888888888889, 559.777777777778, 629.75, 1233.9, 1422.3, 1424.77777777778, 1433.625, 799.1, 889.9, 1064.4
	, 1146.5, 1216.8, 1374.7, 1375.6, 1368.3, 796.7, 919.6, 941.7, 1020.3, 1062.8, 1277.7, 1284.2, 1394.88888888889, 707.6, 803.8, 866.5, 953.7, 1012.2, 1226.9, 1283.2, 1289, 644.9, 729.9, 790.7, 918.1, 1129.6
	, 1360.5, 1355.1, 1319.7, 712.4, 811.3, 851.3, 1015.5, 1096.3, 1269.4, 1258.7, 1266.66666666667, 680, 767.9, 827.6, 1002.4, 1142.5, 1294.3, 1316.1, 1310, 698.5, 780.3, 893.7, 1068.8, 970.5, 1120.5, 1109.4
	, 1119, 584.6, 686.8, 707.8, 793.8, 871.9, 1090.5, 1102.7, 1078.2, 549.7, 621.8, 680.4, 736.8, 825.8, 1117.2, 1090.1, 1073.1, 534.5, 670.6, 711.9, 723.9, 1019.4, 1247.4, 1271.3, 1276.1, 627, 752.1, 787.8
	, 904.8, 901.4, 1198.2, 1154.9, 1135.6, 570.1, 671.4, 708.7, 791.3, 865.7, 1062, 1062.1, 1038.9, 475.6, 617.6, 647, 781.5, 997.7, 1025.3, 1120.4, 1160, 610.5, 670.4, 696.2, 935.8, 1003.55555555556, 1086.55555555556
	, 1111.44444444444, 1133.66666666667, 623.9, 671.5, 725.4, 858.4, 866.5, 958.9, 910.8, 750, 662.5, 693.2, 702.9, 817.8, 985.1, 1292, 1317.8, 1301.5, 585.1, 755.9, 866.7, 916.6, 990.4, 1117.1, 1123.22222222222
	, 1139.33333333333, 582.6, 689.6, 753.3, 845.5, 908.3, 1025.7, 1056.3, 1031.2, 554.1, 627.5, 665.6, 854.3, 801.222222222222, 1193, 1149.44444444444, 1124.77777777778, 479.888888888889, 657, 696.111111111111
	, 732.222222222222, 631.8, 842.444444444444, 967.777777777778, 985.333333333333, 404.8, 456.6, 566.7, 644.2, 1274, 1394.9, 1428.9, 1432.77777777778, 704.1, 834.7, 965.3, 1093.7, 1083.55555555556, 1171.77777777778
	, 1114, 1122.57142857143, 712.4, 782.3, 866.2, 911.5, 899.7, 917.3, 1053.2, 1174.55555555556, 587.1, 642.7, 694.9, 834.5, 1068.5, 1394.33333333333, 1435, 1427.66666666667, 721.7, 843.4, 922.9, 1013.7, 1131
	, 1290.2, 1299.6, 1315.8, 722.9, 818.3, 864.2, 1002.6, 1120.7, 1200.2, 1222.4, 1208.5, 767.6, 855, 891, 1026.3, 624.2, 641, 690.2, 703, 425.8, 464.8, 511, 563, 834.375, 886.375, 871.125, 847.5, 497.5, 550.4
	, 591.333333333333, 703.444444444444, 998.5, 1268.88888888889, 1266, 1239.44444444444, 652.1, 733.4, 808.1, 896.9, 670.6, 739, 729.5, 746.5, 490.4, 557.1, 515.7, 625.7, 1116.4, 1220.4, 1312.88888888889
	, 1323, 658.8, 780.5, 826.9, 1036.5, 1260.9, 1390.4, 1364.3, 1323.16666666667, 870.6, 932.4, 1020.4, 1197, 1148.77777777778, 1268.33333333333, 1232.77777777778, 1232.11111111111, 771.8, 928, 911.333333333333
	, 1072.77777777778, 1204.2, 1361.55555555556, 1378.55555555556, 1229.2, 792.2, 903.9, 924.9, 1070.2, 908.3, 983.444444444444, 1068.875, 1092.125, 637.7, 709.1, 710.5, 780.1, 540.571428571429, 692.571428571429
	, 705.714285714286, 729, 362.666666666667, 426.375, 491.125, 508.285714285714, 1123.8, 1245, 1256.9, 1235.7, 706.7, 807, 887.3, 990.1, 840.6, 1089.8, 1160.1, 1144.4, 468.4, 602.9, 716.1, 753.8, 786.333333333333
	, 863.222222222222, 1021, 1071.66666666667, 399.8, 436.1, 536.5, 690.9, 856.2, 956.5, 1066.66666666667, 1062.77777777778, 599.9, 660.4, 710.3, 770.5, 1073.71428571429, 1187.5, 1297.5, 1344.83333333333, 699.75
	, 772.375, 815, 1006.28571428571, 979.111111111111, 1118.11111111111, 1183.22222222222, 1189.22222222222, 572.4, 660.6, 697, 848, 955.142857142857, 1133.42857142857, 1135.42857142857, 1135.42857142857, 640.1
	, 696.8, 823.428571428571, 911.428571428571, 1106.5, 1216.22222222222, 1307.55555555556, 1298.625, 744.9, 797.5, 916.6, 1045.6, 1041.5, 1272.9, 1264.8, 1246.33333333333, 742.6, 795.8, 817.4, 918.5, 973.4
	, 1081.75, 1094.125, 1094.625, 599.2, 730.5, 764.1, 882.8, 802.111111111111, 956.555555555555, 968.444444444444, 986.333333333333, 526.555555555555, 526.9, 661.777777777778, 723.333333333333, 776.333333333333
	, 1127.5, 1160.75, 1123.375, 539.5, 616.1, 695.888888888889, 704.666666666667, 977.9, 1181.9, 1186.2, 1182, 627.4, 663.8, 736.1, 879.9, 996.5, 1329.83333333333, 1327, 1323.66666666667, 667.444444444444
	, 646.5, 809.25, 848.428571428571, 1343.2, 1369.7, 1444.75, 1513.42857142857, 741.6, 875.2, 1028.4, 1141, 1220, 1447.125, 1519.85714285714, 1489.85714285714, 782.5, 879.6, 947.2, 1026, 977.2, 1115.6, 1090.5
	, 1119.9, 623.7, 712.9, 712.5, 895, 997, 1098, 1072.66666666667, 1059.55555555556, 683.5, 805.888888888889, 804.333333333333, 839.888888888889, 1110.77777777778, 1320.55555555556, 1357.66666666667, 1327.44444444444
	, 677.4, 811.8, 935.8, 974.2, 1089.5, 1250.3, 1194, 1218, 760.2, 849.7, 840.2, 1015.3, 795.6, 913.2, 933.7, 991.111111111111, 432.9, 514.2, 567.2, 678.3, 933.555555555555, 1035.66666666667, 1088, 1135.88888888889
	, 498.3, 598.333333333333, 636.888888888889, 760, 783.666666666667, 1019, 967.555555555555, 958, 543.5, 618.2, 669.444444444444, 703.888888888889, 946.5, 1234.8, 1287.7, 1253.2, 604.2, 727.4, 788.4, 836.3
	, 1219.2, 1473.6, 1470.7, 1448.44444444444, 755.8, 849.9, 961.7, 1065.5, 831.1, 957.9, 1051.9, 1043.9, 595.8, 668.5, 726.3, 785.7, 770.777777777778, 1008, 1062.22222222222, 1050.22222222222, 440, 542.8
	, 642.8, 695.111111111111, 1081.2, 1296.6, 1294.6, 1304.2, 608.3, 734.6, 810.6, 915.4, 820.1, 881, 914.555555555555, 935.111111111111, 648.4, 647, 698.5, 786, 866.75, 1153.375, 1205.75, 1202.625, 494.1
	, 588.777777777778, 675.625, 865.857142857143, 907.222222222222, 926.555555555555, 968.777777777778, 1091.625, 557.6, 602, 600.9, 757.6, 968.777777777778, 1069.77777777778, 1096.88888888889, 1135.22222222222
	, 616, 731.8, 756.888888888889, 900.666666666667, 973.1, 1228.5, 1308.7, 1304.9, 497.1, 691.2, 793.5, 811.4, 791.333333333333, 1011.125, 1108.375, 1147.5, 513.8, 539, 589.6, 717.1, 973, 1064.55555555556
	, 1087.22222222222, 1057.88888888889, 720.5, 774.2, 835.4, 945.4, 1067.5, 1264.8, 1334, 1312.33333333333, 639.4, 752.3, 796.7, 1006.8, 1111.1, 1252.1, 1273.4, 1269.6, 644.7, 754.6, 830.5, 929.9, 1171.3
	, 1236, 1258.33333333333, 1275.5, 722.4, 813.1, 830.3, 1046, 1047.22222222222, 1232.88888888889, 1306.75, 1296.875, 694.1, 825.5, 856.9, 983.444444444444, 1158.2, 1426.1, 1439.9, 1411.3, 665.6, 878.8, 967.6
	, 1087.5, 1011.3, 1258.6, 1231.8, 1197.88888888889, 623.9, 746.9, 826.3, 884.8, 993.7, 1137.5, 1188.3, 1242.4, 576.1, 699.8, 719.8, 880.1, 847.3, 953, 1001.66666666667, 1032.66666666667, 566.4, 584.7, 658.9
	, 784.5, 887.888888888889, 983.888888888889, 964.333333333333, 954, 629, 688.777777777778, 684, 758.222222222222, 1038.2, 1234.4, 1282.1, 1382.11111111111, 673.7, 779.2, 874.8, 911.6, 1245.1, 1271.5, 1324.6
	, 1345.8, 690, 769.9, 802.6, 1137, 781.8, 1044.9, 1128.9, 1111, 527.4, 609.3, 700.8, 743.2, 894.5, 1058.3, 1161.5, 1288, 604, 614.1, 750.3, 815.5, 1027.5, 1227.3, 1252, 1254.6, 669.6, 722.2, 823.5, 932.6
	, 1189.44444444444, 1269.33333333333, 1307.22222222222, 1333.125, 760.4, 851.8, 855.7, 1066.55555555556])), New Column("Survival", Numeric, "Continuous", Format("Best", 12), Set Values([9, 9, 8, 8, 10, 9, 9, 9, 10, 9, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 10, 9, 9, 8, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8
	, 8, 8, 8, 9, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 6, 6, 10, 9, 9
	, 7, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 10, 9, 8, 8, 9, 9, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 8, 10, 9, 9, 9, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 8, 8, 8, 8, 9, 9, 9, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 8, 8, 10
	, 9, 9, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 8, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 8, 10, 9, 9, 9, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 8, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 7, 7, 10, 9, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 10, 10, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 9, 9, 8, 8, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 7, 9, 9, 9, 8, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 7, 7, 10, 10, 8, 8, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9
	, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 8, 10, 10, 9, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9
	, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 9, 9, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 8, 8, 8, 10, 9, 9, 9, 7, 7, 7, 6, 10, 10, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 7, 7, 7, 7, 9, 8, 7, 7, 10, 10, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 7, 10, 10, 10, 9, 9, 8, 8, 8, 10, 10, 10, 10, 8
	, 8, 8, 8, 9, 9, 9, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 8, 8, 8, 8, 10, 10, 10, 8, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 8, 8, 7, 7, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 8, 8, 8, 8, 10, 9, 9, 8, 8, 8, 8, 8, 9, 9, 8, 8, 6, 6, 6, 5, 9, 7, 7, 7, 8, 8, 8, 7, 9, 9, 9, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 8, 8, 8, 8, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 10, 9, 9, 10, 10
	, 10, 10, 10, 10, 9, 8, 8, 10, 10, 10, 10, 7, 7, 7, 7, 9, 8, 8, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 9, 9, 10, 10, 10, 10, 7, 6, 6, 6, 8
	, 8, 7, 7, 9, 9, 9, 9, 10, 10, 9, 9, 7, 7, 7, 7, 10, 10, 7, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 9, 10, 9, 9, 9, 8, 8, 8, 10, 10, 9
	, 9, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6, 6, 6, 9, 10, 8, 7, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 9, 9, 9, 9, 10, 9, 9, 9, 9, 9, 9, 9, 10, 10, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 8, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 9, 9, 10, 10
	, 10, 10, 10, 10, 10, 10, 9, 8, 8, 8, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 8, 8, 8, 8, 10, 9, 8, 7, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 8, 8, 10, 10, 10, 9, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10
	, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 9, 9, 9, 10, 10, 10, 9])), New Column("True_Mass", Numeric, "Continuous", Format("Best", 12), Set Values([5116, 6893, 6921, 6867, 4718, 4435, 5330, 5096, 9208, 9206, 9326.66666666667, 9134.66666666667, 6961, 7468, 7819, 9157, 10911, 12510, 12801, 12985, 5664, 7205, 7690, 8717, 9441, 12318, 12504, 12267, 6224
	, 7039, 8025, 8522, 9161, 10836, 11351, 11299, 5526, 5760, 7346, 8410, 10000, 12342, 12577, 12449, 6431, 7521, 8367, 9150, 8370, 8161.14285714286, 8134.66666666667, 7872, 6995, 6753, 7295, 8151, 9578, 13527
	, 13890, 13695, 5570, 6348, 8407, 8960, 10545, 12497, 12161, 11850, 7321, 8038, 7870, 8870, 9541, 10920, 11883.3333333333, 12306.25, 5896, 6713, 7696, 8675, 8866, 10761, 10904, 10909, 4872, 5787, 7055, 7971
	, 9599, 11462, 11724, 11681, 6179, 7180, 7672, 8885, 6789, 9590, 9777, 9649, 4366, 4724, 6369, 6494, 10672, 12920, 13303, 13553, 6415, 7694, 8223, 9609, 8889, 10087, 10681, 10219, 7500, 7847, 8342, 8062
	, 10162, 11114, 12069, 12216, 7072, 7244, 7858, 9333, 9953, 10753, 11427, 11780, 5786, 6084, 6272, 8646, 8730, 9554, 9339, 8832, 7348, 7525, 7381, 8527, 9365, 12092, 12427, 12362, 6160, 7122, 7849, 8587
	, 9999, 12094, 12387.7777777778, 12623.3333333333, 5715, 6739, 7910, 9123, 8670, 9355, 9644.57142857143, 9505.14285714286, 6091, 6542, 7226, 7897, 8315, 10483, 10946, 10813, 5415, 5845, 6789, 7913, 9602
	, 11432, 11433, 11156, 7203, 7785, 7713, 8624, 10256, 12197, 13341, 13648.8888888889, 6028, 6985, 7817, 9590, 10974, 12247, 12982, 13437, 5799, 6685, 7915, 9948, 9562, 12374, 12218, 11896.6666666667, 5942
	, 6241, 7325, 8360, 5646, 6340, 6017, 6170, 4240, 4789, 4705, 4799, 10941, 13416, 13641, 13576, 6667, 6793, 8751, 9833, 6636, 7714.66666666667, 8394.66666666667, 8594.66666666667, 5038, 4713, 4694.66666666667
	, 6194.66666666667, 7976, 9117, 8946, 9228, 5362, 5905, 6099, 7040, 9956, 11201, 11883, 12631.1111111111, 6261, 7616, 8170, 9236, 7801, 9918, 10609, 10178.8888888889, 5583, 5874, 6740, 7430, 8372, 9790
	, 10493, 10475, 4496, 5287, 6601, 7187, 7936, 8462, 8725, 8589, 5683, 6359, 6372, 6956, 10262, 11731, 11920, 12250, 5477, 6967, 7365, 9221, 10607, 12369, 12335, 12442, 5877, 7481, 7804, 8790, 12273, 15378
	, 14792, 14187, 7833, 9615, 10583, 11194, 8436, 10237, 10619, 10657, 5621, 6184, 7121, 7803, 9815, 10942, 10348.875, 10045.125, 7589, 8549, 9106, 8735, 10547, 12419, 12375.5555555556, 12000, 7533, 8438
	, 9025, 9940, 8826, 9196, 9096, 9216, 5245, 6113, 6190, 7286, 8975, 11368, 11654, 11125, 5815, 6933, 7976, 8226, 7873, 9029, 9789, 9674, 4969, 5795, 6108, 6960, 11449, 12865, 13074.75, 13249.125, 7352, 8365
	, 9525, 10397, 10786, 12148, 12164, 11870, 7117, 8287, 8349, 9366, 11282, 12439, 13134, 13033.125, 6037, 7108, 8450, 9924, 9390, 10498, 10193.1428571429, 10125.7142857143, 6769, 7060, 8526, 8921, 12713
	, 14691, 14920, 14838.3333333333, 8313, 9506, 10201, 11953, 10544, 11359, 11022, 10884, 6828, 8100, 7915, 9211, 8694, 10036, 9941, 9904, 5660, 6885, 6624, 7856, 8442, 10024, 10210, 9964, 4970, 5853, 6565
	, 7372, 10542, 12382, 12334, 12412, 5154, 6343, 8218, 8675, 10123, 12071, 13384, 13587, 6720, 7125, 7837, 9363, 7754, 8955, 9790, 9952, 4971, 5482, 6408, 7356, 9089, 10672, 9252.44444444445, 9261.33333333333
	, 6113, 7224, 7155, 8400, 10530, 12808, 12739, 12848, 6977, 7963, 8447, 9731, 11647, 13197, 13154, 12726, 6436, 8313, 8798, 11094, 9158, 11049, 11532.375, 11509.875, 6865, 7887, 7789, 8451, 12908, 14225
	, 13577, 13510, 7513, 8481, 9225, 11150, 9202, 10621, 10742, 10677.7142857143, 6731, 7368, 7492, 8155, 9041, 11465, 11699, 11587, 5995, 7266, 7259, 7932, 8854, 10695, 11569, 11595, 5139, 5855, 6703, 8021
	, 9534, 11558, 11675, 11447, 5869, 6346, 7527, 8055, 7492, 8789, 9772.875, 9873, 5165, 5517, 5872, 6774, 9429, 12030, 11755, 11525, 5989, 7851, 7904, 8637, 8124, 9254, 9967, 8740, 5284, 6225, 6098, 7781
	, 6859, 9260, 9709, 9691, 3654, 4326, 5840, 5866, 11984, 13122, 12945, 12543, 8205, 8860, 9138, 9651, 9667, 12015, 12491, 12846, 5446, 6292, 7421, 9007, 8740, 10744, 10721, 10878, 5605, 6582, 6849, 7715
	, 8174, 9919, 11109, 11374, 4297, 4652, 6453, 7589, 9358, 12361, 12385, 12250, 5652, 6886, 7975, 8344, 9185, 11537, 11469, 11695, 5184, 6415, 7298, 8338, 8793, 11919, 12415, 12234, 5475, 5820, 7522, 8628
	, 8177, 8156, 8001, 7974, 6010, 6338, 6359, 7168, 9857, 13298, 13280, 13218, 6033, 7421, 8099, 8906, 10186, 11413, 11798, 11665, 6099, 7097, 7971, 8699, 10235, 12543, 12507.7777777778, 12254.4444444444
	, 6437, 7666, 9277, 9648, 10793, 11635, 12983, 12439, 6421, 7415, 7841, 9352, 8584, 10845, 10641, 10298, 6700, 7157, 7671, 8436, 9003, 10425, 10795, 10824, 5315, 5904, 6887, 7908, 9261, 12063, 12376, 11835
	, 6139, 7363, 8480, 8862, 9585, 10483, 11808, 11834, 5645, 6137, 6831, 9150, 8804, 12299, 12702, 12453, 6000, 7116, 8234, 8307, 8179, 7965, 7568, 7525, 6354, 6471, 6806, 7729, 9384, 10634, 11574, 12001
	, 6087, 6558, 7007, 8444, 11550, 14090, 14806, 14289, 7513, 8350, 9530, 10869, 9584, 10146, 10025, 9827.42857142857, 6165, 7099, 7372, 8446, 10412, 12328, 12530, 12406, 5499, 6881, 8035, 8968, 9926, 13031
	, 13026, 13010, 5997, 7251, 8409, 9315, 8324, 9117, 9578, 9812, 5395, 5436, 5751, 7653, 6233, 6994, 7336, 6528.375, 4785, 4861, 5686, 6050, 9148, 9926, 10321, 10752, 5440, 6211, 6082, 7841, 9859, 12875
	, 13420, 13405, 6306, 7534, 8174, 9028, 12368, 13518, 14580, 14658.75, 7660, 9685, 10109, 11093, 10236, 12081, 13169, 12977, 6571, 7168, 8420, 9955, 9425, 10575, 11988.8888888889, 12217.7777777778, 5846
	, 6997, 7556, 8805, 9396, 11512, 12474, 12750, 5579, 5872, 8259, 9566, 9541, 12576, 13022, 12892, 5509, 6290, 7781, 8504, 10285, 11456, 11524, 10898.75, 6313, 6868, 6946, 9899, 7236, 9763, 9974, 9839, 5007
	, 5579, 6029, 6613, 11198, 13696, 13996.6666666667, 13860, 7622, 8646, 10109, 10176, 10317, 12112, 12760, 12792, 6103, 6822, 7186, 8699, 8958, 12105, 12433, 11956, 5864, 6848, 7254, 7840, 8574, 10180, 11035
	, 11187, 5620, 6244, 7031, 8211, 9614, 10451, 10622, 10856.6666666667, 5599, 6163, 6644, 8362, 10912.2222222222, 13448.75, 13986.25, 14026.25, 7385, 8894, 9146, 10216.6666666667, 8905, 10096, 10817, 10880
	, 5148, 6136, 6541, 7826, 11637, 13650, 13340, 13366.6666666667, 8291, 9414, 9349, 10139, 7486, 9647, 9259, 9065, 6062, 6053, 6093, 6724, 8651, 10324, 10574, 10597, 5319, 6071, 6857, 6972, 8322, 9776, 10120
	, 10238, 6423, 7023, 7289, 7692, 9225, 12412, 12563, 12520, 6575, 7910, 8318, 8561, 8910, 9933, 10521, 11251, 5633, 6122, 6865, 8069, 8653, 9099, 9122, 8505, 6777, 6980, 7383, 7625, 11659, 14589, 14517
	, 14104, 7281, 8950, 9077, 10640, 11854, 13301.1111111111, 13433.3333333333, 13397.7777777778, 6507, 7628, 8897, 9720, 11315, 13462, 13559, 13276, 7288, 8323, 9017, 10179, 6779, 8656, 8097.83333333333, 9227.4
	, 6065, 6181, 6969, 6659, 9080, 9988, 9785, 9821.25, 6140, 6624, 7175, 8838, 10152, 11817, 11844, 11829, 5524, 6733, 7277, 7954, 9492, 12116, 12128, 11867, 5558, 6533, 8182, 8774, 6806, 7987, 8705, 8571
	, 5081, 5204, 5849, 6334, 9078, 10380, 10706, 10919, 6151, 6603, 6967, 8139, 10718, 11136, 11843, 12028.5, 6331, 7197, 8026, 8715, 11458, 14782, 15381, 15310, 6680, 8118, 9827, 10672, 8514, 10597.5, 10625.625
	, 9224, 6794, 7616, 7765, 7785, 11344, 12569, 13431, 13092, 6503, 7833, 9144, 9080, 10699, 13257, 13706, 13606.6666666667, 7072, 8000, 8946, 9995, 6997, 8967, 10044, 10099, 4641, 4756, 5534, 6614, 9084
	, 11026, 11250, 11268, 6232, 7112, 7469, 8689, 9668, 10456, 11235, 11109, 5105, 5774, 7398, 7508, 8834, 9672, 9880, 10178, 5487, 6168, 6607, 7915, 9270, 11022, 11480, 11264, 6405, 6535, 6924, 8259, 8529
	, 9399, 9318, 9755, 5278, 5661, 5615, 7845, 6364, 7619, 7248.375, 7250.625, 5192, 5569, 5613, 5986, 10557, 11942, 12174, 11688.8888888889, 6059, 6855, 7998, 8522, 12024, 13889, 13901, 13745, 7248, 8623
	, 9434, 10846, 8018, 8827, 9989, 10043, 5822, 6052, 6619, 7574, 11232.2222222222, 11211, 11924, 11473.875, 6645, 7626, 8423, 9952, 7890, 8847, 8640, 8528.625, 5369, 5836, 6474, 7461, 6579, 6676, 8027, 7175.25
	, 5175, 5167, 5964, 6021, 8005, 10828, 11147, 10589, 5268, 5959, 6889, 7349, 10326, 11690, 12010, 11994, 7118, 8236, 8186, 9081, 8360, 8010, 8592, 8437, 6246, 6736, 6989, 7739, 12347, 13190, 13584.4444444444
	, 13101.25, 7022, 8078, 9266, 10630, 7626, 9018, 9648, 9836, 5022, 4629, 6135, 6922, 6555, 7974, 7751, 7452, 6500, 6767, 5244, 5847, 8823, 10235, 10225, 10262, 6039, 6887, 6668, 7984, 10557.7777777778, 12564.4444444444
	, 13085, 12804.2857142857, 7363, 8155, 9142, 10089, 7328, 8347, 8721, 8777, 4568, 5072, 5639, 6232, 5969, 6294, 6324, 6373, 4953, 5017, 4388, 5425, 6276, 8410, 8365, 7883, 4678, 5237, 5706, 5726, 6704, 7653
	, 7659, 7563, 5307, 5781, 6056, 6449, 8899, 10559, 10666, 10558, 6065, 6723, 7327, 8060, 6106, 7043, 7386, 7023, 5788, 6260, 6828, 6322, 5825, 7058, 6904, 6802, 5522, 5649, 6012, 6129, 9305, 11087, 10932
	, 10570.2857142857, 6431, 7665, 8146, 8469, 9630, 11362, 11514.4444444444, 11200, 6811, 7566, 8067, 8623, 12850, 14649, 14714.4444444444, 14367.7777777778, 8167, 9153, 10196, 10810, 7706, 9504, 9665, 9398
	, 5946, 6048, 6230, 6902, 11053, 11716, 11681, 11515, 6518, 7830, 7531, 9759, 5772, 7107, 7523, 7923, 4318, 4465, 4788, 5241, 7834, 9031, 9525, 9487, 4340, 5050, 5661, 6783, 7981, 10438, 10055, 10064, 5699
	, 6414, 7044, 7835, 9236, 10999, 11156, 10709, 5509, 6718, 7086, 7953, 8414, 9449, 9867, 10074, 5581, 5997, 5865, 7571, 9474, 10106, 9800, 9427, 5914, 6664, 7138, 8476, 7084, 7526, 7573, 7471.33333333333
	, 5849, 5635, 6252, 7000, 9788, 12042, 12556, 13584.4444444444, 6122, 7319, 8297, 8855, 9586, 11895.5555555556, 11821.1111111111, 12104.4444444444, 5817, 7564, 8219, 8985, 10843, 14783, 14629, 14395, 6775
	, 8199, 9490, 9794, 10825, 12780, 12960, 12543.75, 6199, 6636, 8844, 9671, 9371, 11968, 12497, 12508, 5941, 6612, 7453, 9037, 5958, 6492, 6151, 6322, 4057, 4094, 4511, 4915, 9621, 11553, 12332, 12756, 5431
	, 6305, 7482, 9007, 11366, 13654, 13955, 13870, 6140, 7435, 8763, 9801, 11274, 13861, 14004.4444444444, 13383.3333333333, 7616, 8119, 10237, 10521, 10324, 10715, 11923, 12359, 7039, 8048, 8072, 10175, 8983
	, 9328, 9154.28571428571, 9073.33333333333, 7225, 7563, 6989, 8254, 5627, 5841, 5889, 5865, 4395, 5088, 4542, 4817, 3813, 4047, 4129.2, 4260, 3646, 2742, 3433, 3971, 5499, 6494, 6186, 5798, 4587, 5201, 5038
	, 5038, 12339, 14223, 14247.7777777778, 14336.25, 7991, 8899, 10644, 11465, 12168, 13747, 13756, 13683, 7967, 9196, 9417, 10203, 10628, 12777, 12842, 12554, 7076, 8038, 8665, 9537, 10122, 12269, 12832, 12890
	, 6449, 7299, 7907, 9181, 11296, 13605, 13551, 13197, 7124, 8113, 8513, 10155, 10963, 12694, 12587, 12666.6666666667, 6800, 7679, 8276, 10024, 11425, 12943, 13161, 13100, 6985, 7803, 8937, 10688, 9705, 11205
	, 11094, 11190, 5846, 6868, 7078, 7938, 8719, 10905, 11027, 10782, 5497, 6218, 6804, 7368, 8258, 11172, 10901, 10731, 5345, 6706, 7119, 7239, 10194, 12474, 12713, 12761, 6270, 7521, 7878, 9048, 9014, 11982
	, 11549, 11356, 5701, 6714, 7087, 7913, 8657, 10620, 10621, 10389, 4756, 6176, 6470, 7815, 9977, 10253, 11204, 11600, 6105, 6704, 6962, 9358, 9032, 9779, 10003, 10203, 6239, 6715, 7254, 8584, 8665, 9589
	, 9108, 7500, 6625, 6932, 7029, 8178, 9851, 12920, 13178, 13015, 5851, 7559, 8667, 9166, 9904, 11171, 11232.2222222222, 11393.3333333333, 5826, 6896, 7533, 8455, 9083, 10257, 10563, 10312, 5541, 6275, 6656
	, 8543, 7211, 10737, 10345, 10123, 4319, 5913, 6265, 6590, 6318, 7582, 8710, 8868, 4048, 4566, 5667, 6442, 12740, 13949, 14289, 14327.7777777778, 7041, 8347, 9653, 10937, 9752, 10546, 10026, 10103.1428571429
	, 7124, 7823, 8662, 9115, 8997, 9173, 10532, 10571, 5871, 6427, 6949, 8345, 10685, 13943.3333333333, 14350, 14276.6666666667, 7217, 8434, 9229, 10137, 11310, 12902, 12996, 13158, 7229, 8183, 8642, 10026
	, 11207, 12002, 12224, 12085, 7676, 8550, 8910, 10263, 6242, 6410, 6902, 7030, 4258, 4648, 5110, 5630, 6675, 7091, 6969, 6780, 4975, 5504, 5322, 6331, 9985, 12688.8888888889, 12660, 12394.4444444444, 6521
	, 7334, 8081, 8969, 6706, 7390, 7295, 7465, 4904, 5571, 5157, 6257, 11164, 12204, 13128.8888888889, 13230, 6588, 7805, 8269, 10365, 12609, 13904, 13643, 13231.6666666667, 8706, 9324, 10204, 11970, 10339
	, 11415, 11095, 11089, 7718, 8352, 8202, 9655, 12042, 12254, 12407, 12292, 7922, 9039, 9249, 10702, 9083, 8851, 8551, 8737, 6377, 7091, 7105, 7801, 3784, 4848, 4940, 5103, 3264, 3411, 3929, 3558, 11238
	, 12450, 12569, 12357, 7067, 8070, 8873, 9901, 8406, 10898, 11601, 11444, 4684, 6029, 7161, 7538, 7077, 7769, 9189, 9645, 3998, 4361, 5365, 6909, 8562, 9565, 9600, 9565, 5999, 6604, 7103, 7705, 7516, 7125
	, 7785, 8069, 5598, 6179, 5705, 7044, 8812, 10063, 10649, 10703, 5724, 6606, 6273, 7632, 6686, 7934, 7948, 7948, 6401, 6968, 5764, 6380, 11065, 12162.2222222222, 13075.5555555556, 12986.25, 7449, 7975, 9166
	, 10456, 10415, 12729, 12648, 12463.3333333333, 7426, 7958, 8174, 9185, 9734, 9735.75, 9847.125, 9851.625, 5992, 7305, 7641, 8828, 7219, 8609, 8716, 8877, 4739, 5269, 5956, 6510, 6987, 9020, 9286, 8987
	, 5395, 6161, 6263, 6342, 9779, 11819, 11862, 11820, 6274, 6638, 7361, 8799, 5979, 7979, 7962, 7942, 6007, 6465, 6474, 5939, 13432, 13697, 14447.5, 15134.2857142857, 7416, 8752, 10284, 11410, 10980, 13024.125
	, 13678.7142857143, 13408.7142857143, 7825, 8796, 9472, 10260, 9772, 11156, 10905, 11199, 6237, 7129, 7125, 8950, 8973, 9882, 9654, 9536, 6835, 7253, 7239, 7559, 11107.7777777778, 13205.5555555556, 13576.6666666667
	, 13274.4444444444, 6774, 8118, 9358, 9742, 10895, 12503, 11940, 10962, 7602, 8497, 8402, 10153, 7956, 9132, 9337, 8920, 4329, 5142, 5672, 6783, 8402, 9321, 9792, 10223, 4983, 5385, 5732, 6840, 7053, 9171
	, 8708, 8622, 5435, 6182, 6025, 6335, 9465, 12348, 12877, 12532, 6042, 7274, 7884, 8363, 12192, 14736, 14707, 14484.4444444444, 7558, 8499, 9617, 10655, 8311, 9579, 10519, 10439, 5958, 6685, 7263, 7857
	, 6937, 9072, 9560, 9452, 4400, 5428, 6428, 6256, 10812, 12966, 12946, 13042, 6083, 7346, 8106, 9154, 8201, 8810, 9145.55555555556, 9351.11111111111, 6484, 6470, 6985, 7860, 8667.5, 11533.75, 12057.5, 12026.25
	, 4941, 5887.77777777778, 6756.25, 8658.57142857143, 8165, 8339, 8719, 8733, 5576, 6020, 6009, 7576, 8719, 9628, 9872, 10217, 6160, 7318, 6812, 8106, 9731, 12285, 13087, 13049, 4971, 6912, 7935, 8114, 7122
	, 8089, 8867, 9180, 5138, 5390, 5896, 7171, 9730, 9581, 9785, 9521, 7205, 7742, 8354, 9454, 8540, 10118.4, 10672, 10498.6666666667, 6394, 6770.7, 6373.6, 7047.6, 11111, 12521, 12734, 12696, 6447, 7546, 8305
	, 9299, 11713, 12360, 12583.3333333333, 12755, 7224, 8131, 8303, 10460, 9425, 11096, 10454, 10375, 6941, 8255, 8569, 8851, 11582, 14261, 14399, 14113, 6656, 8788, 9676, 10875, 10113, 12586, 12318, 11978.8888888889
	, 6239, 7469, 8263, 8848, 9937, 11375, 11883, 12424, 5761, 6998, 7198, 8801, 8473, 8577, 9015, 9294, 5664, 5847, 6589, 7845, 7991, 8855, 8679, 8586, 5661, 6199, 6156, 6824, 10382, 12344, 12821, 12439, 6737
	, 7792, 8748, 9116, 12451, 12715, 13246, 13458, 6900, 7699, 8026, 11370, 7818, 10449, 11289, 11110, 5274, 6093, 7008, 7432, 8945, 10583, 11615, 11592, 6040, 6141, 7503, 8155, 10275, 12273, 12520, 12546
	, 6696, 7222, 8235, 9326, 10705, 11424, 11765, 11998.125, 7604, 8518, 8557, 9599])))) << Run Formulas)